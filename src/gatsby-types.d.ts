/* eslint-disable */

/* prettier-ignore */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
  readonly url: Maybe<Scalars['String']>;
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allStrapiActivity: STRAPI_ACTIVITYConnection;
  readonly allStrapiActivityContentTextnode: STRAPI_ACTIVITY_CONTENT_TEXTNODEConnection;
  readonly allStrapiActivityGroup: STRAPI_ACTIVITY_GROUPConnection;
  readonly allStrapiActivityGroupCategory: STRAPI_ACTIVITY_GROUP_CATEGORYConnection;
  readonly allStrapiActivityGroupContentTextnode: STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEConnection;
  readonly allStrapiActivityTerm: STRAPI_ACTIVITY_TERMConnection;
  readonly allStrapiActivitygroupTerm: STRAPI_ACTIVITYGROUP_TERMConnection;
  readonly allStrapiAgeGroup: STRAPI_AGE_GROUPConnection;
  readonly allStrapiAgeGroupContentTextnode: STRAPI_AGE_GROUP_CONTENT_TEXTNODEConnection;
  readonly allStrapiComponentBlocksActivityBlock: STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKConnection;
  readonly allStrapiComponentBlocksAgeGroupBlock: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKConnection;
  readonly allStrapiComponentBlocksAgeGroupBlockIngressTextnode: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEConnection;
  readonly allStrapiComponentBlocksContentPageBlock: STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKConnection;
  readonly allStrapiComponentBlocksHeroBlock: STRAPI__COMPONENT_BLOCKS_HERO_BLOCKConnection;
  readonly allStrapiComponentBlocksImageBlock: STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKConnection;
  readonly allStrapiComponentBlocksLinkBlock: STRAPI__COMPONENT_BLOCKS_LINK_BLOCKConnection;
  readonly allStrapiComponentBlocksTextBlock: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKConnection;
  readonly allStrapiComponentBlocksTextBlockTextTextnode: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEConnection;
  readonly allStrapiComponentBlocksVideoBlock: STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKConnection;
  readonly allStrapiComponentFooterFooterSection: STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONConnection;
  readonly allStrapiComponentLinksLink: STRAPI__COMPONENT_LINKS_LINKConnection;
  readonly allStrapiComponentNavigationNavigation: STRAPI__COMPONENT_NAVIGATION_NAVIGATIONConnection;
  readonly allStrapiContentPage: STRAPI_CONTENT_PAGEConnection;
  readonly allStrapiContentPageMainTextTextnode: STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEConnection;
  readonly allStrapiCookiePage: STRAPI_COOKIE_PAGEConnection;
  readonly allStrapiDuration: STRAPI_DURATIONConnection;
  readonly allStrapiEducationalObjective: STRAPI_EDUCATIONAL_OBJECTIVEConnection;
  readonly allStrapiFrontPage: STRAPI_FRONT_PAGEConnection;
  readonly allStrapiGroupSize: STRAPI_GROUP_SIZEConnection;
  readonly allStrapiLeaderSkill: STRAPI_LEADER_SKILLConnection;
  readonly allStrapiLocation: STRAPI_LOCATIONConnection;
  readonly allStrapiMedia: STRAPI__MEDIAConnection;
  readonly allStrapiNotFoundPage: STRAPI_NOT_FOUND_PAGEConnection;
  readonly allStrapiSkillArea: STRAPI_SKILL_AREAConnection;
  readonly allStrapiSuggestion: STRAPI_SUGGESTIONConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly strapiActivity: Maybe<STRAPI_ACTIVITY>;
  readonly strapiActivityContentTextnode: Maybe<STRAPI_ACTIVITY_CONTENT_TEXTNODE>;
  readonly strapiActivityGroup: Maybe<STRAPI_ACTIVITY_GROUP>;
  readonly strapiActivityGroupCategory: Maybe<STRAPI_ACTIVITY_GROUP_CATEGORY>;
  readonly strapiActivityGroupContentTextnode: Maybe<STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODE>;
  readonly strapiActivityTerm: Maybe<STRAPI_ACTIVITY_TERM>;
  readonly strapiActivitygroupTerm: Maybe<STRAPI_ACTIVITYGROUP_TERM>;
  readonly strapiAgeGroup: Maybe<STRAPI_AGE_GROUP>;
  readonly strapiAgeGroupContentTextnode: Maybe<STRAPI_AGE_GROUP_CONTENT_TEXTNODE>;
  readonly strapiComponentBlocksActivityBlock: Maybe<STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCK>;
  readonly strapiComponentBlocksAgeGroupBlock: Maybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK>;
  readonly strapiComponentBlocksAgeGroupBlockIngressTextnode: Maybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODE>;
  readonly strapiComponentBlocksContentPageBlock: Maybe<STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCK>;
  readonly strapiComponentBlocksHeroBlock: Maybe<STRAPI__COMPONENT_BLOCKS_HERO_BLOCK>;
  readonly strapiComponentBlocksImageBlock: Maybe<STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCK>;
  readonly strapiComponentBlocksLinkBlock: Maybe<STRAPI__COMPONENT_BLOCKS_LINK_BLOCK>;
  readonly strapiComponentBlocksTextBlock: Maybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK>;
  readonly strapiComponentBlocksTextBlockTextTextnode: Maybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODE>;
  readonly strapiComponentBlocksVideoBlock: Maybe<STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCK>;
  readonly strapiComponentFooterFooterSection: Maybe<STRAPI__COMPONENT_FOOTER_FOOTER_SECTION>;
  readonly strapiComponentLinksLink: Maybe<STRAPI__COMPONENT_LINKS_LINK>;
  readonly strapiComponentNavigationNavigation: Maybe<STRAPI__COMPONENT_NAVIGATION_NAVIGATION>;
  readonly strapiContentPage: Maybe<STRAPI_CONTENT_PAGE>;
  readonly strapiContentPageMainTextTextnode: Maybe<STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODE>;
  readonly strapiCookiePage: Maybe<STRAPI_COOKIE_PAGE>;
  readonly strapiDuration: Maybe<STRAPI_DURATION>;
  readonly strapiEducationalObjective: Maybe<STRAPI_EDUCATIONAL_OBJECTIVE>;
  readonly strapiFrontPage: Maybe<STRAPI_FRONT_PAGE>;
  readonly strapiGroupSize: Maybe<STRAPI_GROUP_SIZE>;
  readonly strapiLeaderSkill: Maybe<STRAPI_LEADER_SKILL>;
  readonly strapiLocation: Maybe<STRAPI_LOCATION>;
  readonly strapiMedia: Maybe<STRAPI__MEDIA>;
  readonly strapiNotFoundPage: Maybe<STRAPI_NOT_FOUND_PAGE>;
  readonly strapiSkillArea: Maybe<STRAPI_SKILL_AREA>;
  readonly strapiSuggestion: Maybe<STRAPI_SUGGESTION>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_allStrapiActivityArgs = {
  filter: InputMaybe<STRAPI_ACTIVITYFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ACTIVITYSortInput>>>;
};


type Query_allStrapiActivityContentTextnodeArgs = {
  filter: InputMaybe<STRAPI_ACTIVITY_CONTENT_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ACTIVITY_CONTENT_TEXTNODESortInput>>>;
};


type Query_allStrapiActivityGroupArgs = {
  filter: InputMaybe<STRAPI_ACTIVITY_GROUPFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ACTIVITY_GROUPSortInput>>>;
};


type Query_allStrapiActivityGroupCategoryArgs = {
  filter: InputMaybe<STRAPI_ACTIVITY_GROUP_CATEGORYFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ACTIVITY_GROUP_CATEGORYSortInput>>>;
};


type Query_allStrapiActivityGroupContentTextnodeArgs = {
  filter: InputMaybe<STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODESortInput>>>;
};


type Query_allStrapiActivityTermArgs = {
  filter: InputMaybe<STRAPI_ACTIVITY_TERMFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ACTIVITY_TERMSortInput>>>;
};


type Query_allStrapiActivitygroupTermArgs = {
  filter: InputMaybe<STRAPI_ACTIVITYGROUP_TERMFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ACTIVITYGROUP_TERMSortInput>>>;
};


type Query_allStrapiAgeGroupArgs = {
  filter: InputMaybe<STRAPI_AGE_GROUPFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_AGE_GROUPSortInput>>>;
};


type Query_allStrapiAgeGroupContentTextnodeArgs = {
  filter: InputMaybe<STRAPI_AGE_GROUP_CONTENT_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_AGE_GROUP_CONTENT_TEXTNODESortInput>>>;
};


type Query_allStrapiComponentBlocksActivityBlockArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKSortInput>>>;
};


type Query_allStrapiComponentBlocksAgeGroupBlockArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKSortInput>>>;
};


type Query_allStrapiComponentBlocksAgeGroupBlockIngressTextnodeArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODESortInput>>>;
};


type Query_allStrapiComponentBlocksContentPageBlockArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKSortInput>>>;
};


type Query_allStrapiComponentBlocksHeroBlockArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_BLOCKS_HERO_BLOCKFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_BLOCKS_HERO_BLOCKSortInput>>>;
};


type Query_allStrapiComponentBlocksImageBlockArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKSortInput>>>;
};


type Query_allStrapiComponentBlocksLinkBlockArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_BLOCKS_LINK_BLOCKFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_BLOCKS_LINK_BLOCKSortInput>>>;
};


type Query_allStrapiComponentBlocksTextBlockArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKSortInput>>>;
};


type Query_allStrapiComponentBlocksTextBlockTextTextnodeArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODESortInput>>>;
};


type Query_allStrapiComponentBlocksVideoBlockArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKSortInput>>>;
};


type Query_allStrapiComponentFooterFooterSectionArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONSortInput>>>;
};


type Query_allStrapiComponentLinksLinkArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_LINKS_LINKFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_LINKS_LINKSortInput>>>;
};


type Query_allStrapiComponentNavigationNavigationArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_NAVIGATION_NAVIGATIONSortInput>>>;
};


type Query_allStrapiContentPageArgs = {
  filter: InputMaybe<STRAPI_CONTENT_PAGEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_CONTENT_PAGESortInput>>>;
};


type Query_allStrapiContentPageMainTextTextnodeArgs = {
  filter: InputMaybe<STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODESortInput>>>;
};


type Query_allStrapiCookiePageArgs = {
  filter: InputMaybe<STRAPI_COOKIE_PAGEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_COOKIE_PAGESortInput>>>;
};


type Query_allStrapiDurationArgs = {
  filter: InputMaybe<STRAPI_DURATIONFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_DURATIONSortInput>>>;
};


type Query_allStrapiEducationalObjectiveArgs = {
  filter: InputMaybe<STRAPI_EDUCATIONAL_OBJECTIVEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EDUCATIONAL_OBJECTIVESortInput>>>;
};


type Query_allStrapiFrontPageArgs = {
  filter: InputMaybe<STRAPI_FRONT_PAGEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_FRONT_PAGESortInput>>>;
};


type Query_allStrapiGroupSizeArgs = {
  filter: InputMaybe<STRAPI_GROUP_SIZEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_GROUP_SIZESortInput>>>;
};


type Query_allStrapiLeaderSkillArgs = {
  filter: InputMaybe<STRAPI_LEADER_SKILLFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_LEADER_SKILLSortInput>>>;
};


type Query_allStrapiLocationArgs = {
  filter: InputMaybe<STRAPI_LOCATIONFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_LOCATIONSortInput>>>;
};


type Query_allStrapiMediaArgs = {
  filter: InputMaybe<STRAPI__MEDIAFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__MEDIASortInput>>>;
};


type Query_allStrapiNotFoundPageArgs = {
  filter: InputMaybe<STRAPI_NOT_FOUND_PAGEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_NOT_FOUND_PAGESortInput>>>;
};


type Query_allStrapiSkillAreaArgs = {
  filter: InputMaybe<STRAPI_SKILL_AREAFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_SKILL_AREASortInput>>>;
};


type Query_allStrapiSuggestionArgs = {
  filter: InputMaybe<STRAPI_SUGGESTIONFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_SUGGESTIONSortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiActivityArgs = {
  activity_group: InputMaybe<STRAPI_ACTIVITY_GROUPFilterInput>;
  activity_term: InputMaybe<STRAPI_ACTIVITY_TERMFilterInput>;
  age_group: InputMaybe<STRAPI_AGE_GROUPFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<STRAPI_ACTIVITYContentFilterInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  duration: InputMaybe<STRAPI_DURATIONFilterInput>;
  educational_objectives: InputMaybe<STRAPI_EDUCATIONAL_OBJECTIVEFilterListInput>;
  files: InputMaybe<STRAPI__MEDIAFilterListInput>;
  group_sizes: InputMaybe<STRAPI_GROUP_SIZEFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  images: InputMaybe<STRAPI__MEDIAFilterListInput>;
  ingress: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  is_marine_activity: InputMaybe<BooleanQueryOperatorInput>;
  leader_skills: InputMaybe<STRAPI_LEADER_SKILLFilterListInput>;
  leader_tasks: InputMaybe<StringQueryOperatorInput>;
  links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKFilterListInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  localizations: InputMaybe<STRAPI_ACTIVITYLocalizationsFilterInput>;
  locations: InputMaybe<STRAPI_LOCATIONFilterListInput>;
  logo: InputMaybe<STRAPI__MEDIAFilterInput>;
  mandatory: InputMaybe<BooleanQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  preparation_duration: InputMaybe<STRAPI_DURATIONFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  skill_areas: InputMaybe<STRAPI_SKILL_AREAFilterListInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  suggestions: InputMaybe<STRAPI_SUGGESTIONFilterListInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  wp_guid: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiActivityContentTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiActivityGroupArgs = {
  activities: InputMaybe<STRAPI_ACTIVITYFilterListInput>;
  activity_group_category: InputMaybe<STRAPI_ACTIVITY_GROUP_CATEGORYFilterInput>;
  activitygroup_term: InputMaybe<STRAPI_ACTIVITYGROUP_TERMFilterInput>;
  age_group: InputMaybe<STRAPI_AGE_GROUPFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<STRAPI_ACTIVITY_GROUPContentFilterInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ingress: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKFilterListInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  localizations: InputMaybe<STRAPI_ACTIVITY_GROUPLocalizationsFilterInput>;
  logo: InputMaybe<STRAPI__MEDIAFilterInput>;
  main_image: InputMaybe<STRAPI__MEDIAFilterInput>;
  mandatory: InputMaybe<BooleanQueryOperatorInput>;
  mandatory_activities_description: InputMaybe<StringQueryOperatorInput>;
  mandatory_activities_title: InputMaybe<StringQueryOperatorInput>;
  optional_activities_description: InputMaybe<StringQueryOperatorInput>;
  optional_activities_title: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  sort_order: InputMaybe<IntQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  subactivity_term: InputMaybe<STRAPI_ACTIVITY_TERMFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  wp_guid: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiActivityGroupCategoryArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  sort_order: InputMaybe<IntQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  wp_guid: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiActivityGroupContentTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiActivityTermArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  plural: InputMaybe<StringQueryOperatorInput>;
  singular: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiActivitygroupTermArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  plural: InputMaybe<StringQueryOperatorInput>;
  singular: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiAgeGroupArgs = {
  activity_groups: InputMaybe<STRAPI_ACTIVITY_GROUPFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  color: InputMaybe<StringQueryOperatorInput>;
  content: InputMaybe<STRAPI_AGE_GROUPContentFilterInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ingress: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKFilterListInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  localizations: InputMaybe<STRAPI_AGE_GROUPLocalizationsFilterInput>;
  logo: InputMaybe<STRAPI__MEDIAFilterInput>;
  lower_content_area: InputMaybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFilterListInput>;
  main_image: InputMaybe<STRAPI__MEDIAFilterInput>;
  maximum_age: InputMaybe<IntQueryOperatorInput>;
  minimum_age: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  wp_guid: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiAgeGroupContentTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiComponentBlocksActivityBlockArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_component: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiComponentBlocksAgeGroupBlockArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ingress: InputMaybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKIngressFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_component: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiComponentBlocksAgeGroupBlockIngressTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ingress: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiComponentBlocksContentPageBlockArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_component: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiComponentBlocksHeroBlockArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  link_text: InputMaybe<StringQueryOperatorInput>;
  link_url: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_component: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  text: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiComponentBlocksImageBlockArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_component: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiComponentBlocksLinkBlockArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_component: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  text: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiComponentBlocksTextBlockArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_component: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  text: InputMaybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKTextFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiComponentBlocksTextBlockTextTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiComponentBlocksVideoBlockArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_component: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  video_url: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiComponentFooterFooterSectionArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiComponentLinksLinkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiComponentNavigationNavigationArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiContentPageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ingress: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  localizations: InputMaybe<STRAPI_CONTENT_PAGELocalizationsFilterInput>;
  main_image: InputMaybe<STRAPI__MEDIAFilterInput>;
  main_text: InputMaybe<STRAPI_CONTENT_PAGEMain_textFilterInput>;
  meta_description: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiContentPageMainTextTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  main_text: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiCookiePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ingress: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  localizations: InputMaybe<STRAPI_COOKIE_PAGELocalizationsFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiDurationArgs = {
  activities: InputMaybe<STRAPI_ACTIVITYFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  localizations: InputMaybe<STRAPI_DURATIONLocalizationsFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  preparation_activities: InputMaybe<STRAPI_ACTIVITYFilterListInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiEducationalObjectiveArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiFrontPageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  footer_sections: InputMaybe<STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFilterListInput>;
  hero_image: InputMaybe<STRAPI__MEDIAFilterInput>;
  hero_link_text: InputMaybe<StringQueryOperatorInput>;
  hero_link_url: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ingress: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  localizations: InputMaybe<STRAPI_FRONT_PAGELocalizationsFilterInput>;
  meta_description: InputMaybe<StringQueryOperatorInput>;
  meta_title: InputMaybe<StringQueryOperatorInput>;
  navigation: InputMaybe<STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiGroupSizeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiLeaderSkillArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiLocationArgs = {
  activities: InputMaybe<STRAPI_ACTIVITYFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  icon: InputMaybe<STRAPI__MEDIAFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  localizations: InputMaybe<STRAPI_LOCATIONLocalizationsFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiMediaArgs = {
  alternativeText: InputMaybe<StringQueryOperatorInput>;
  caption: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  formats: InputMaybe<STRAPI__MEDIAFormatsFilterInput>;
  hash: InputMaybe<StringQueryOperatorInput>;
  height: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  localFile: InputMaybe<FileFilterInput>;
  mime: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  size: InputMaybe<FloatQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  width: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiNotFoundPageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ingress: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  localizations: InputMaybe<STRAPI_NOT_FOUND_PAGELocalizationsFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiSkillAreaArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiSuggestionArgs = {
  activity: InputMaybe<STRAPI_ACTIVITYFilterInput>;
  author: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  duration: InputMaybe<STRAPI_DURATIONFilterInput>;
  files: InputMaybe<STRAPI__MEDIAFilterListInput>;
  from_web: InputMaybe<BooleanQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  like_count: InputMaybe<IntQueryOperatorInput>;
  links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKFilterListInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  localizations: InputMaybe<STRAPI_SUGGESTIONLocalizationsFilterInput>;
  locations: InputMaybe<STRAPI_LOCATIONFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  wp_guid: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_ACTIVITY = Node & {
  readonly activity_group: Maybe<STRAPI_ACTIVITY_GROUP>;
  readonly activity_term: Maybe<STRAPI_ACTIVITY_TERM>;
  readonly age_group: Maybe<STRAPI_AGE_GROUP>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<STRAPI_ACTIVITYContent>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly duration: Maybe<STRAPI_DURATION>;
  readonly educational_objectives: Maybe<ReadonlyArray<Maybe<STRAPI_EDUCATIONAL_OBJECTIVE>>>;
  readonly files: Maybe<ReadonlyArray<Maybe<STRAPI__MEDIA>>>;
  readonly group_sizes: Maybe<ReadonlyArray<Maybe<STRAPI_GROUP_SIZE>>>;
  readonly id: Scalars['ID'];
  readonly images: Maybe<ReadonlyArray<Maybe<STRAPI__MEDIA>>>;
  readonly ingress: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly is_marine_activity: Maybe<Scalars['Boolean']>;
  readonly leader_skills: Maybe<ReadonlyArray<Maybe<STRAPI_LEADER_SKILL>>>;
  readonly leader_tasks: Maybe<Scalars['String']>;
  readonly links: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_LINKS_LINK>>>;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_ACTIVITYLocalizations>;
  readonly locations: Maybe<ReadonlyArray<Maybe<STRAPI_LOCATION>>>;
  readonly logo: Maybe<STRAPI__MEDIA>;
  readonly mandatory: Maybe<Scalars['Boolean']>;
  readonly parent: Maybe<Node>;
  readonly preparation_duration: Maybe<STRAPI_DURATION>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly skill_areas: Maybe<ReadonlyArray<Maybe<STRAPI_SKILL_AREA>>>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly suggestions: Maybe<ReadonlyArray<Maybe<STRAPI_SUGGESTION>>>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly wp_guid: Maybe<Scalars['String']>;
};


type STRAPI_ACTIVITY_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ACTIVITY_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ACTIVITY_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_ACTIVITYConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ACTIVITYEdge>;
  readonly group: ReadonlyArray<STRAPI_ACTIVITYGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ACTIVITY>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ACTIVITYConnection_distinctArgs = {
  field: STRAPI_ACTIVITYFieldSelector;
};


type STRAPI_ACTIVITYConnection_groupArgs = {
  field: STRAPI_ACTIVITYFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ACTIVITYConnection_maxArgs = {
  field: STRAPI_ACTIVITYFieldSelector;
};


type STRAPI_ACTIVITYConnection_minArgs = {
  field: STRAPI_ACTIVITYFieldSelector;
};


type STRAPI_ACTIVITYConnection_sumArgs = {
  field: STRAPI_ACTIVITYFieldSelector;
};

type STRAPI_ACTIVITYContent = {
  readonly data: Maybe<STRAPI_ACTIVITY_CONTENT_TEXTNODE>;
};

type STRAPI_ACTIVITYContentFieldSelector = {
  readonly data: InputMaybe<STRAPI_ACTIVITY_CONTENT_TEXTNODEFieldSelector>;
};

type STRAPI_ACTIVITYContentFilterInput = {
  readonly data: InputMaybe<STRAPI_ACTIVITY_CONTENT_TEXTNODEFilterInput>;
};

type STRAPI_ACTIVITYContentSortInput = {
  readonly data: InputMaybe<STRAPI_ACTIVITY_CONTENT_TEXTNODESortInput>;
};

type STRAPI_ACTIVITYEdge = {
  readonly next: Maybe<STRAPI_ACTIVITY>;
  readonly node: STRAPI_ACTIVITY;
  readonly previous: Maybe<STRAPI_ACTIVITY>;
};

type STRAPI_ACTIVITYFieldSelector = {
  readonly activity_group: InputMaybe<STRAPI_ACTIVITY_GROUPFieldSelector>;
  readonly activity_term: InputMaybe<STRAPI_ACTIVITY_TERMFieldSelector>;
  readonly age_group: InputMaybe<STRAPI_AGE_GROUPFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<STRAPI_ACTIVITYContentFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly duration: InputMaybe<STRAPI_DURATIONFieldSelector>;
  readonly educational_objectives: InputMaybe<STRAPI_EDUCATIONAL_OBJECTIVEFieldSelector>;
  readonly files: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly group_sizes: InputMaybe<STRAPI_GROUP_SIZEFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly images: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly ingress: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly is_marine_activity: InputMaybe<FieldSelectorEnum>;
  readonly leader_skills: InputMaybe<STRAPI_LEADER_SKILLFieldSelector>;
  readonly leader_tasks: InputMaybe<FieldSelectorEnum>;
  readonly links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly localizations: InputMaybe<STRAPI_ACTIVITYLocalizationsFieldSelector>;
  readonly locations: InputMaybe<STRAPI_LOCATIONFieldSelector>;
  readonly logo: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly mandatory: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly preparation_duration: InputMaybe<STRAPI_DURATIONFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly skill_areas: InputMaybe<STRAPI_SKILL_AREAFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly suggestions: InputMaybe<STRAPI_SUGGESTIONFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly wp_guid: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_ACTIVITYFilterInput = {
  readonly activity_group: InputMaybe<STRAPI_ACTIVITY_GROUPFilterInput>;
  readonly activity_term: InputMaybe<STRAPI_ACTIVITY_TERMFilterInput>;
  readonly age_group: InputMaybe<STRAPI_AGE_GROUPFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<STRAPI_ACTIVITYContentFilterInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly duration: InputMaybe<STRAPI_DURATIONFilterInput>;
  readonly educational_objectives: InputMaybe<STRAPI_EDUCATIONAL_OBJECTIVEFilterListInput>;
  readonly files: InputMaybe<STRAPI__MEDIAFilterListInput>;
  readonly group_sizes: InputMaybe<STRAPI_GROUP_SIZEFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly images: InputMaybe<STRAPI__MEDIAFilterListInput>;
  readonly ingress: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly is_marine_activity: InputMaybe<BooleanQueryOperatorInput>;
  readonly leader_skills: InputMaybe<STRAPI_LEADER_SKILLFilterListInput>;
  readonly leader_tasks: InputMaybe<StringQueryOperatorInput>;
  readonly links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKFilterListInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly localizations: InputMaybe<STRAPI_ACTIVITYLocalizationsFilterInput>;
  readonly locations: InputMaybe<STRAPI_LOCATIONFilterListInput>;
  readonly logo: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly mandatory: InputMaybe<BooleanQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly preparation_duration: InputMaybe<STRAPI_DURATIONFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly skill_areas: InputMaybe<STRAPI_SKILL_AREAFilterListInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly suggestions: InputMaybe<STRAPI_SUGGESTIONFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly wp_guid: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_ACTIVITYFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_ACTIVITYFilterInput>;
};

type STRAPI_ACTIVITYGROUP_TERM = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly plural: Maybe<Scalars['String']>;
  readonly singular: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_ACTIVITYGROUP_TERM_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ACTIVITYGROUP_TERM_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_ACTIVITYGROUP_TERMConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ACTIVITYGROUP_TERMEdge>;
  readonly group: ReadonlyArray<STRAPI_ACTIVITYGROUP_TERMGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ACTIVITYGROUP_TERM>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ACTIVITYGROUP_TERMConnection_distinctArgs = {
  field: STRAPI_ACTIVITYGROUP_TERMFieldSelector;
};


type STRAPI_ACTIVITYGROUP_TERMConnection_groupArgs = {
  field: STRAPI_ACTIVITYGROUP_TERMFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ACTIVITYGROUP_TERMConnection_maxArgs = {
  field: STRAPI_ACTIVITYGROUP_TERMFieldSelector;
};


type STRAPI_ACTIVITYGROUP_TERMConnection_minArgs = {
  field: STRAPI_ACTIVITYGROUP_TERMFieldSelector;
};


type STRAPI_ACTIVITYGROUP_TERMConnection_sumArgs = {
  field: STRAPI_ACTIVITYGROUP_TERMFieldSelector;
};

type STRAPI_ACTIVITYGROUP_TERMEdge = {
  readonly next: Maybe<STRAPI_ACTIVITYGROUP_TERM>;
  readonly node: STRAPI_ACTIVITYGROUP_TERM;
  readonly previous: Maybe<STRAPI_ACTIVITYGROUP_TERM>;
};

type STRAPI_ACTIVITYGROUP_TERMFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly plural: InputMaybe<FieldSelectorEnum>;
  readonly singular: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_ACTIVITYGROUP_TERMFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly plural: InputMaybe<StringQueryOperatorInput>;
  readonly singular: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_ACTIVITYGROUP_TERMGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ACTIVITYGROUP_TERMEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ACTIVITYGROUP_TERMGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ACTIVITYGROUP_TERM>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ACTIVITYGROUP_TERMGroupConnection_distinctArgs = {
  field: STRAPI_ACTIVITYGROUP_TERMFieldSelector;
};


type STRAPI_ACTIVITYGROUP_TERMGroupConnection_groupArgs = {
  field: STRAPI_ACTIVITYGROUP_TERMFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ACTIVITYGROUP_TERMGroupConnection_maxArgs = {
  field: STRAPI_ACTIVITYGROUP_TERMFieldSelector;
};


type STRAPI_ACTIVITYGROUP_TERMGroupConnection_minArgs = {
  field: STRAPI_ACTIVITYGROUP_TERMFieldSelector;
};


type STRAPI_ACTIVITYGROUP_TERMGroupConnection_sumArgs = {
  field: STRAPI_ACTIVITYGROUP_TERMFieldSelector;
};

type STRAPI_ACTIVITYGROUP_TERMSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly plural: InputMaybe<SortOrderEnum>;
  readonly singular: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_ACTIVITYGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ACTIVITYEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ACTIVITYGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ACTIVITY>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ACTIVITYGroupConnection_distinctArgs = {
  field: STRAPI_ACTIVITYFieldSelector;
};


type STRAPI_ACTIVITYGroupConnection_groupArgs = {
  field: STRAPI_ACTIVITYFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ACTIVITYGroupConnection_maxArgs = {
  field: STRAPI_ACTIVITYFieldSelector;
};


type STRAPI_ACTIVITYGroupConnection_minArgs = {
  field: STRAPI_ACTIVITYFieldSelector;
};


type STRAPI_ACTIVITYGroupConnection_sumArgs = {
  field: STRAPI_ACTIVITYFieldSelector;
};

type STRAPI_ACTIVITYLocalizations = {
  readonly data: Maybe<ReadonlyArray<Maybe<STRAPI_ACTIVITYLocalizationsData>>>;
};

type STRAPI_ACTIVITYLocalizationsData = {
  readonly attributes: Maybe<STRAPI_ACTIVITYLocalizationsDataAttributes>;
  readonly id: Maybe<Scalars['Int']>;
};

type STRAPI_ACTIVITYLocalizationsDataAttributes = {
  readonly content: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly ingress: Maybe<Scalars['String']>;
  readonly leader_tasks: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly mandatory: Maybe<Scalars['Boolean']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly wp_guid: Maybe<Scalars['String']>;
};


type STRAPI_ACTIVITYLocalizationsDataAttributes_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ACTIVITYLocalizationsDataAttributes_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ACTIVITYLocalizationsDataAttributes_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_ACTIVITYLocalizationsDataAttributesFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly ingress: InputMaybe<FieldSelectorEnum>;
  readonly leader_tasks: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly mandatory: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly wp_guid: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_ACTIVITYLocalizationsDataAttributesFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly ingress: InputMaybe<StringQueryOperatorInput>;
  readonly leader_tasks: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly mandatory: InputMaybe<BooleanQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly wp_guid: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_ACTIVITYLocalizationsDataAttributesSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly ingress: InputMaybe<SortOrderEnum>;
  readonly leader_tasks: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly mandatory: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly wp_guid: InputMaybe<SortOrderEnum>;
};

type STRAPI_ACTIVITYLocalizationsDataFieldSelector = {
  readonly attributes: InputMaybe<STRAPI_ACTIVITYLocalizationsDataAttributesFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_ACTIVITYLocalizationsDataFilterInput = {
  readonly attributes: InputMaybe<STRAPI_ACTIVITYLocalizationsDataAttributesFilterInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_ACTIVITYLocalizationsDataFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_ACTIVITYLocalizationsDataFilterInput>;
};

type STRAPI_ACTIVITYLocalizationsDataSortInput = {
  readonly attributes: InputMaybe<STRAPI_ACTIVITYLocalizationsDataAttributesSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
};

type STRAPI_ACTIVITYLocalizationsFieldSelector = {
  readonly data: InputMaybe<STRAPI_ACTIVITYLocalizationsDataFieldSelector>;
};

type STRAPI_ACTIVITYLocalizationsFilterInput = {
  readonly data: InputMaybe<STRAPI_ACTIVITYLocalizationsDataFilterListInput>;
};

type STRAPI_ACTIVITYLocalizationsSortInput = {
  readonly data: InputMaybe<STRAPI_ACTIVITYLocalizationsDataSortInput>;
};

type STRAPI_ACTIVITYSortInput = {
  readonly activity_group: InputMaybe<STRAPI_ACTIVITY_GROUPSortInput>;
  readonly activity_term: InputMaybe<STRAPI_ACTIVITY_TERMSortInput>;
  readonly age_group: InputMaybe<STRAPI_AGE_GROUPSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<STRAPI_ACTIVITYContentSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly duration: InputMaybe<STRAPI_DURATIONSortInput>;
  readonly educational_objectives: InputMaybe<STRAPI_EDUCATIONAL_OBJECTIVESortInput>;
  readonly files: InputMaybe<STRAPI__MEDIASortInput>;
  readonly group_sizes: InputMaybe<STRAPI_GROUP_SIZESortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly images: InputMaybe<STRAPI__MEDIASortInput>;
  readonly ingress: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly is_marine_activity: InputMaybe<SortOrderEnum>;
  readonly leader_skills: InputMaybe<STRAPI_LEADER_SKILLSortInput>;
  readonly leader_tasks: InputMaybe<SortOrderEnum>;
  readonly links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly localizations: InputMaybe<STRAPI_ACTIVITYLocalizationsSortInput>;
  readonly locations: InputMaybe<STRAPI_LOCATIONSortInput>;
  readonly logo: InputMaybe<STRAPI__MEDIASortInput>;
  readonly mandatory: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly preparation_duration: InputMaybe<STRAPI_DURATIONSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly skill_areas: InputMaybe<STRAPI_SKILL_AREASortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly suggestions: InputMaybe<STRAPI_SUGGESTIONSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly wp_guid: InputMaybe<SortOrderEnum>;
};

type STRAPI_ACTIVITY_CONTENT_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_ACTIVITY_CONTENT_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ACTIVITY_CONTENT_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_ACTIVITY_CONTENT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ACTIVITY_CONTENT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ACTIVITY_CONTENT_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_ACTIVITY_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_ACTIVITY_CONTENT_TEXTNODEConnection_groupArgs = {
  field: STRAPI_ACTIVITY_CONTENT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ACTIVITY_CONTENT_TEXTNODEConnection_maxArgs = {
  field: STRAPI_ACTIVITY_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_ACTIVITY_CONTENT_TEXTNODEConnection_minArgs = {
  field: STRAPI_ACTIVITY_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_ACTIVITY_CONTENT_TEXTNODEConnection_sumArgs = {
  field: STRAPI_ACTIVITY_CONTENT_TEXTNODEFieldSelector;
};

type STRAPI_ACTIVITY_CONTENT_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_ACTIVITY_CONTENT_TEXTNODE>;
  readonly node: STRAPI_ACTIVITY_CONTENT_TEXTNODE;
  readonly previous: Maybe<STRAPI_ACTIVITY_CONTENT_TEXTNODE>;
};

type STRAPI_ACTIVITY_CONTENT_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_ACTIVITY_CONTENT_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_ACTIVITY_CONTENT_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ACTIVITY_CONTENT_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ACTIVITY_CONTENT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ACTIVITY_CONTENT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ACTIVITY_CONTENT_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_ACTIVITY_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_ACTIVITY_CONTENT_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_ACTIVITY_CONTENT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ACTIVITY_CONTENT_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_ACTIVITY_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_ACTIVITY_CONTENT_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_ACTIVITY_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_ACTIVITY_CONTENT_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_ACTIVITY_CONTENT_TEXTNODEFieldSelector;
};

type STRAPI_ACTIVITY_CONTENT_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_ACTIVITY_GROUP = Node & {
  readonly activities: Maybe<ReadonlyArray<Maybe<STRAPI_ACTIVITY>>>;
  readonly activity_group_category: Maybe<STRAPI_ACTIVITY_GROUP_CATEGORY>;
  readonly activitygroup_term: Maybe<STRAPI_ACTIVITYGROUP_TERM>;
  readonly age_group: Maybe<STRAPI_AGE_GROUP>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<STRAPI_ACTIVITY_GROUPContent>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly ingress: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_LINKS_LINK>>>;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_ACTIVITY_GROUPLocalizations>;
  readonly logo: Maybe<STRAPI__MEDIA>;
  readonly main_image: Maybe<STRAPI__MEDIA>;
  readonly mandatory: Maybe<Scalars['Boolean']>;
  readonly mandatory_activities_description: Maybe<Scalars['String']>;
  readonly mandatory_activities_title: Maybe<Scalars['String']>;
  readonly optional_activities_description: Maybe<Scalars['String']>;
  readonly optional_activities_title: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly sort_order: Maybe<Scalars['Int']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly subactivity_term: Maybe<STRAPI_ACTIVITY_TERM>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly wp_guid: Maybe<Scalars['String']>;
};


type STRAPI_ACTIVITY_GROUP_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ACTIVITY_GROUP_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ACTIVITY_GROUP_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_ACTIVITY_GROUPConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ACTIVITY_GROUPEdge>;
  readonly group: ReadonlyArray<STRAPI_ACTIVITY_GROUPGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ACTIVITY_GROUP>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ACTIVITY_GROUPConnection_distinctArgs = {
  field: STRAPI_ACTIVITY_GROUPFieldSelector;
};


type STRAPI_ACTIVITY_GROUPConnection_groupArgs = {
  field: STRAPI_ACTIVITY_GROUPFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ACTIVITY_GROUPConnection_maxArgs = {
  field: STRAPI_ACTIVITY_GROUPFieldSelector;
};


type STRAPI_ACTIVITY_GROUPConnection_minArgs = {
  field: STRAPI_ACTIVITY_GROUPFieldSelector;
};


type STRAPI_ACTIVITY_GROUPConnection_sumArgs = {
  field: STRAPI_ACTIVITY_GROUPFieldSelector;
};

type STRAPI_ACTIVITY_GROUPContent = {
  readonly data: Maybe<STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODE>;
};

type STRAPI_ACTIVITY_GROUPContentFieldSelector = {
  readonly data: InputMaybe<STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEFieldSelector>;
};

type STRAPI_ACTIVITY_GROUPContentFilterInput = {
  readonly data: InputMaybe<STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEFilterInput>;
};

type STRAPI_ACTIVITY_GROUPContentSortInput = {
  readonly data: InputMaybe<STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODESortInput>;
};

type STRAPI_ACTIVITY_GROUPEdge = {
  readonly next: Maybe<STRAPI_ACTIVITY_GROUP>;
  readonly node: STRAPI_ACTIVITY_GROUP;
  readonly previous: Maybe<STRAPI_ACTIVITY_GROUP>;
};

type STRAPI_ACTIVITY_GROUPFieldSelector = {
  readonly activities: InputMaybe<STRAPI_ACTIVITYFieldSelector>;
  readonly activity_group_category: InputMaybe<STRAPI_ACTIVITY_GROUP_CATEGORYFieldSelector>;
  readonly activitygroup_term: InputMaybe<STRAPI_ACTIVITYGROUP_TERMFieldSelector>;
  readonly age_group: InputMaybe<STRAPI_AGE_GROUPFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<STRAPI_ACTIVITY_GROUPContentFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ingress: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly localizations: InputMaybe<STRAPI_ACTIVITY_GROUPLocalizationsFieldSelector>;
  readonly logo: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly main_image: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly mandatory: InputMaybe<FieldSelectorEnum>;
  readonly mandatory_activities_description: InputMaybe<FieldSelectorEnum>;
  readonly mandatory_activities_title: InputMaybe<FieldSelectorEnum>;
  readonly optional_activities_description: InputMaybe<FieldSelectorEnum>;
  readonly optional_activities_title: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly sort_order: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly subactivity_term: InputMaybe<STRAPI_ACTIVITY_TERMFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly wp_guid: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_ACTIVITY_GROUPFilterInput = {
  readonly activities: InputMaybe<STRAPI_ACTIVITYFilterListInput>;
  readonly activity_group_category: InputMaybe<STRAPI_ACTIVITY_GROUP_CATEGORYFilterInput>;
  readonly activitygroup_term: InputMaybe<STRAPI_ACTIVITYGROUP_TERMFilterInput>;
  readonly age_group: InputMaybe<STRAPI_AGE_GROUPFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<STRAPI_ACTIVITY_GROUPContentFilterInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ingress: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKFilterListInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly localizations: InputMaybe<STRAPI_ACTIVITY_GROUPLocalizationsFilterInput>;
  readonly logo: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly main_image: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly mandatory: InputMaybe<BooleanQueryOperatorInput>;
  readonly mandatory_activities_description: InputMaybe<StringQueryOperatorInput>;
  readonly mandatory_activities_title: InputMaybe<StringQueryOperatorInput>;
  readonly optional_activities_description: InputMaybe<StringQueryOperatorInput>;
  readonly optional_activities_title: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly sort_order: InputMaybe<IntQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly subactivity_term: InputMaybe<STRAPI_ACTIVITY_TERMFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly wp_guid: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_ACTIVITY_GROUPFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_ACTIVITY_GROUPFilterInput>;
};

type STRAPI_ACTIVITY_GROUPGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ACTIVITY_GROUPEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ACTIVITY_GROUPGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ACTIVITY_GROUP>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ACTIVITY_GROUPGroupConnection_distinctArgs = {
  field: STRAPI_ACTIVITY_GROUPFieldSelector;
};


type STRAPI_ACTIVITY_GROUPGroupConnection_groupArgs = {
  field: STRAPI_ACTIVITY_GROUPFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ACTIVITY_GROUPGroupConnection_maxArgs = {
  field: STRAPI_ACTIVITY_GROUPFieldSelector;
};


type STRAPI_ACTIVITY_GROUPGroupConnection_minArgs = {
  field: STRAPI_ACTIVITY_GROUPFieldSelector;
};


type STRAPI_ACTIVITY_GROUPGroupConnection_sumArgs = {
  field: STRAPI_ACTIVITY_GROUPFieldSelector;
};

type STRAPI_ACTIVITY_GROUPLocalizations = {
  readonly data: Maybe<ReadonlyArray<Maybe<STRAPI_ACTIVITY_GROUPLocalizationsData>>>;
};

type STRAPI_ACTIVITY_GROUPLocalizationsData = {
  readonly attributes: Maybe<STRAPI_ACTIVITY_GROUPLocalizationsDataAttributes>;
  readonly id: Maybe<Scalars['Int']>;
};

type STRAPI_ACTIVITY_GROUPLocalizationsDataAttributes = {
  readonly content: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly ingress: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly mandatory: Maybe<Scalars['Boolean']>;
  readonly mandatory_activities_description: Maybe<Scalars['String']>;
  readonly mandatory_activities_title: Maybe<Scalars['String']>;
  readonly optional_activities_description: Maybe<Scalars['String']>;
  readonly optional_activities_title: Maybe<Scalars['String']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly sort_order: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly wp_guid: Maybe<Scalars['String']>;
};


type STRAPI_ACTIVITY_GROUPLocalizationsDataAttributes_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ACTIVITY_GROUPLocalizationsDataAttributes_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ACTIVITY_GROUPLocalizationsDataAttributes_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_ACTIVITY_GROUPLocalizationsDataAttributesFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly ingress: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly mandatory: InputMaybe<FieldSelectorEnum>;
  readonly mandatory_activities_description: InputMaybe<FieldSelectorEnum>;
  readonly mandatory_activities_title: InputMaybe<FieldSelectorEnum>;
  readonly optional_activities_description: InputMaybe<FieldSelectorEnum>;
  readonly optional_activities_title: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly sort_order: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly wp_guid: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_ACTIVITY_GROUPLocalizationsDataAttributesFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly ingress: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly mandatory: InputMaybe<BooleanQueryOperatorInput>;
  readonly mandatory_activities_description: InputMaybe<StringQueryOperatorInput>;
  readonly mandatory_activities_title: InputMaybe<StringQueryOperatorInput>;
  readonly optional_activities_description: InputMaybe<StringQueryOperatorInput>;
  readonly optional_activities_title: InputMaybe<StringQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly sort_order: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly wp_guid: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_ACTIVITY_GROUPLocalizationsDataAttributesSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly ingress: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly mandatory: InputMaybe<SortOrderEnum>;
  readonly mandatory_activities_description: InputMaybe<SortOrderEnum>;
  readonly mandatory_activities_title: InputMaybe<SortOrderEnum>;
  readonly optional_activities_description: InputMaybe<SortOrderEnum>;
  readonly optional_activities_title: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly sort_order: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly wp_guid: InputMaybe<SortOrderEnum>;
};

type STRAPI_ACTIVITY_GROUPLocalizationsDataFieldSelector = {
  readonly attributes: InputMaybe<STRAPI_ACTIVITY_GROUPLocalizationsDataAttributesFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_ACTIVITY_GROUPLocalizationsDataFilterInput = {
  readonly attributes: InputMaybe<STRAPI_ACTIVITY_GROUPLocalizationsDataAttributesFilterInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_ACTIVITY_GROUPLocalizationsDataFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_ACTIVITY_GROUPLocalizationsDataFilterInput>;
};

type STRAPI_ACTIVITY_GROUPLocalizationsDataSortInput = {
  readonly attributes: InputMaybe<STRAPI_ACTIVITY_GROUPLocalizationsDataAttributesSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
};

type STRAPI_ACTIVITY_GROUPLocalizationsFieldSelector = {
  readonly data: InputMaybe<STRAPI_ACTIVITY_GROUPLocalizationsDataFieldSelector>;
};

type STRAPI_ACTIVITY_GROUPLocalizationsFilterInput = {
  readonly data: InputMaybe<STRAPI_ACTIVITY_GROUPLocalizationsDataFilterListInput>;
};

type STRAPI_ACTIVITY_GROUPLocalizationsSortInput = {
  readonly data: InputMaybe<STRAPI_ACTIVITY_GROUPLocalizationsDataSortInput>;
};

type STRAPI_ACTIVITY_GROUPSortInput = {
  readonly activities: InputMaybe<STRAPI_ACTIVITYSortInput>;
  readonly activity_group_category: InputMaybe<STRAPI_ACTIVITY_GROUP_CATEGORYSortInput>;
  readonly activitygroup_term: InputMaybe<STRAPI_ACTIVITYGROUP_TERMSortInput>;
  readonly age_group: InputMaybe<STRAPI_AGE_GROUPSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<STRAPI_ACTIVITY_GROUPContentSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ingress: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly localizations: InputMaybe<STRAPI_ACTIVITY_GROUPLocalizationsSortInput>;
  readonly logo: InputMaybe<STRAPI__MEDIASortInput>;
  readonly main_image: InputMaybe<STRAPI__MEDIASortInput>;
  readonly mandatory: InputMaybe<SortOrderEnum>;
  readonly mandatory_activities_description: InputMaybe<SortOrderEnum>;
  readonly mandatory_activities_title: InputMaybe<SortOrderEnum>;
  readonly optional_activities_description: InputMaybe<SortOrderEnum>;
  readonly optional_activities_title: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly sort_order: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly subactivity_term: InputMaybe<STRAPI_ACTIVITY_TERMSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly wp_guid: InputMaybe<SortOrderEnum>;
};

type STRAPI_ACTIVITY_GROUP_CATEGORY = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly sort_order: Maybe<Scalars['Int']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly wp_guid: Maybe<Scalars['String']>;
};


type STRAPI_ACTIVITY_GROUP_CATEGORY_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ACTIVITY_GROUP_CATEGORY_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_ACTIVITY_GROUP_CATEGORYConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ACTIVITY_GROUP_CATEGORYEdge>;
  readonly group: ReadonlyArray<STRAPI_ACTIVITY_GROUP_CATEGORYGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ACTIVITY_GROUP_CATEGORY>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ACTIVITY_GROUP_CATEGORYConnection_distinctArgs = {
  field: STRAPI_ACTIVITY_GROUP_CATEGORYFieldSelector;
};


type STRAPI_ACTIVITY_GROUP_CATEGORYConnection_groupArgs = {
  field: STRAPI_ACTIVITY_GROUP_CATEGORYFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ACTIVITY_GROUP_CATEGORYConnection_maxArgs = {
  field: STRAPI_ACTIVITY_GROUP_CATEGORYFieldSelector;
};


type STRAPI_ACTIVITY_GROUP_CATEGORYConnection_minArgs = {
  field: STRAPI_ACTIVITY_GROUP_CATEGORYFieldSelector;
};


type STRAPI_ACTIVITY_GROUP_CATEGORYConnection_sumArgs = {
  field: STRAPI_ACTIVITY_GROUP_CATEGORYFieldSelector;
};

type STRAPI_ACTIVITY_GROUP_CATEGORYEdge = {
  readonly next: Maybe<STRAPI_ACTIVITY_GROUP_CATEGORY>;
  readonly node: STRAPI_ACTIVITY_GROUP_CATEGORY;
  readonly previous: Maybe<STRAPI_ACTIVITY_GROUP_CATEGORY>;
};

type STRAPI_ACTIVITY_GROUP_CATEGORYFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sort_order: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly wp_guid: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_ACTIVITY_GROUP_CATEGORYFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sort_order: InputMaybe<IntQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly wp_guid: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_ACTIVITY_GROUP_CATEGORYGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ACTIVITY_GROUP_CATEGORYEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ACTIVITY_GROUP_CATEGORYGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ACTIVITY_GROUP_CATEGORY>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ACTIVITY_GROUP_CATEGORYGroupConnection_distinctArgs = {
  field: STRAPI_ACTIVITY_GROUP_CATEGORYFieldSelector;
};


type STRAPI_ACTIVITY_GROUP_CATEGORYGroupConnection_groupArgs = {
  field: STRAPI_ACTIVITY_GROUP_CATEGORYFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ACTIVITY_GROUP_CATEGORYGroupConnection_maxArgs = {
  field: STRAPI_ACTIVITY_GROUP_CATEGORYFieldSelector;
};


type STRAPI_ACTIVITY_GROUP_CATEGORYGroupConnection_minArgs = {
  field: STRAPI_ACTIVITY_GROUP_CATEGORYFieldSelector;
};


type STRAPI_ACTIVITY_GROUP_CATEGORYGroupConnection_sumArgs = {
  field: STRAPI_ACTIVITY_GROUP_CATEGORYFieldSelector;
};

type STRAPI_ACTIVITY_GROUP_CATEGORYSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sort_order: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly wp_guid: InputMaybe<SortOrderEnum>;
};

type STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEConnection_groupArgs = {
  field: STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEConnection_maxArgs = {
  field: STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEConnection_minArgs = {
  field: STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEConnection_sumArgs = {
  field: STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEFieldSelector;
};

type STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODE>;
  readonly node: STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODE;
  readonly previous: Maybe<STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODE>;
};

type STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODEFieldSelector;
};

type STRAPI_ACTIVITY_GROUP_CONTENT_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_ACTIVITY_TERM = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly plural: Maybe<Scalars['String']>;
  readonly singular: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_ACTIVITY_TERM_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ACTIVITY_TERM_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_ACTIVITY_TERMConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ACTIVITY_TERMEdge>;
  readonly group: ReadonlyArray<STRAPI_ACTIVITY_TERMGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ACTIVITY_TERM>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ACTIVITY_TERMConnection_distinctArgs = {
  field: STRAPI_ACTIVITY_TERMFieldSelector;
};


type STRAPI_ACTIVITY_TERMConnection_groupArgs = {
  field: STRAPI_ACTIVITY_TERMFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ACTIVITY_TERMConnection_maxArgs = {
  field: STRAPI_ACTIVITY_TERMFieldSelector;
};


type STRAPI_ACTIVITY_TERMConnection_minArgs = {
  field: STRAPI_ACTIVITY_TERMFieldSelector;
};


type STRAPI_ACTIVITY_TERMConnection_sumArgs = {
  field: STRAPI_ACTIVITY_TERMFieldSelector;
};

type STRAPI_ACTIVITY_TERMEdge = {
  readonly next: Maybe<STRAPI_ACTIVITY_TERM>;
  readonly node: STRAPI_ACTIVITY_TERM;
  readonly previous: Maybe<STRAPI_ACTIVITY_TERM>;
};

type STRAPI_ACTIVITY_TERMFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly plural: InputMaybe<FieldSelectorEnum>;
  readonly singular: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_ACTIVITY_TERMFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly plural: InputMaybe<StringQueryOperatorInput>;
  readonly singular: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_ACTIVITY_TERMGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ACTIVITY_TERMEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ACTIVITY_TERMGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ACTIVITY_TERM>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ACTIVITY_TERMGroupConnection_distinctArgs = {
  field: STRAPI_ACTIVITY_TERMFieldSelector;
};


type STRAPI_ACTIVITY_TERMGroupConnection_groupArgs = {
  field: STRAPI_ACTIVITY_TERMFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ACTIVITY_TERMGroupConnection_maxArgs = {
  field: STRAPI_ACTIVITY_TERMFieldSelector;
};


type STRAPI_ACTIVITY_TERMGroupConnection_minArgs = {
  field: STRAPI_ACTIVITY_TERMFieldSelector;
};


type STRAPI_ACTIVITY_TERMGroupConnection_sumArgs = {
  field: STRAPI_ACTIVITY_TERMFieldSelector;
};

type STRAPI_ACTIVITY_TERMSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly plural: InputMaybe<SortOrderEnum>;
  readonly singular: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_AGE_GROUP = Node & {
  readonly activity_groups: Maybe<ReadonlyArray<Maybe<STRAPI_ACTIVITY_GROUP>>>;
  readonly children: ReadonlyArray<Node>;
  readonly color: Maybe<Scalars['String']>;
  readonly content: Maybe<STRAPI_AGE_GROUPContent>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly ingress: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_LINKS_LINK>>>;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_AGE_GROUPLocalizations>;
  readonly logo: Maybe<STRAPI__MEDIA>;
  readonly lower_content_area: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK>>>;
  readonly main_image: Maybe<STRAPI__MEDIA>;
  readonly maximum_age: Maybe<Scalars['Int']>;
  readonly minimum_age: Maybe<Scalars['Int']>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly upper_content_area: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKSTRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKUnion>>>;
  readonly wp_guid: Maybe<Scalars['String']>;
};


type STRAPI_AGE_GROUP_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_AGE_GROUP_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_AGE_GROUP_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_AGE_GROUPConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_AGE_GROUPEdge>;
  readonly group: ReadonlyArray<STRAPI_AGE_GROUPGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_AGE_GROUP>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_AGE_GROUPConnection_distinctArgs = {
  field: STRAPI_AGE_GROUPFieldSelector;
};


type STRAPI_AGE_GROUPConnection_groupArgs = {
  field: STRAPI_AGE_GROUPFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_AGE_GROUPConnection_maxArgs = {
  field: STRAPI_AGE_GROUPFieldSelector;
};


type STRAPI_AGE_GROUPConnection_minArgs = {
  field: STRAPI_AGE_GROUPFieldSelector;
};


type STRAPI_AGE_GROUPConnection_sumArgs = {
  field: STRAPI_AGE_GROUPFieldSelector;
};

type STRAPI_AGE_GROUPContent = {
  readonly data: Maybe<STRAPI_AGE_GROUP_CONTENT_TEXTNODE>;
};

type STRAPI_AGE_GROUPContentFieldSelector = {
  readonly data: InputMaybe<STRAPI_AGE_GROUP_CONTENT_TEXTNODEFieldSelector>;
};

type STRAPI_AGE_GROUPContentFilterInput = {
  readonly data: InputMaybe<STRAPI_AGE_GROUP_CONTENT_TEXTNODEFilterInput>;
};

type STRAPI_AGE_GROUPContentSortInput = {
  readonly data: InputMaybe<STRAPI_AGE_GROUP_CONTENT_TEXTNODESortInput>;
};

type STRAPI_AGE_GROUPEdge = {
  readonly next: Maybe<STRAPI_AGE_GROUP>;
  readonly node: STRAPI_AGE_GROUP;
  readonly previous: Maybe<STRAPI_AGE_GROUP>;
};

type STRAPI_AGE_GROUPFieldSelector = {
  readonly activity_groups: InputMaybe<STRAPI_ACTIVITY_GROUPFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly content: InputMaybe<STRAPI_AGE_GROUPContentFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ingress: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly localizations: InputMaybe<STRAPI_AGE_GROUPLocalizationsFieldSelector>;
  readonly logo: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly lower_content_area: InputMaybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFieldSelector>;
  readonly main_image: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly maximum_age: InputMaybe<FieldSelectorEnum>;
  readonly minimum_age: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly wp_guid: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_AGE_GROUPFilterInput = {
  readonly activity_groups: InputMaybe<STRAPI_ACTIVITY_GROUPFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly content: InputMaybe<STRAPI_AGE_GROUPContentFilterInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ingress: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKFilterListInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly localizations: InputMaybe<STRAPI_AGE_GROUPLocalizationsFilterInput>;
  readonly logo: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly lower_content_area: InputMaybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFilterListInput>;
  readonly main_image: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly maximum_age: InputMaybe<IntQueryOperatorInput>;
  readonly minimum_age: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly wp_guid: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_AGE_GROUPGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_AGE_GROUPEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_AGE_GROUPGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_AGE_GROUP>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_AGE_GROUPGroupConnection_distinctArgs = {
  field: STRAPI_AGE_GROUPFieldSelector;
};


type STRAPI_AGE_GROUPGroupConnection_groupArgs = {
  field: STRAPI_AGE_GROUPFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_AGE_GROUPGroupConnection_maxArgs = {
  field: STRAPI_AGE_GROUPFieldSelector;
};


type STRAPI_AGE_GROUPGroupConnection_minArgs = {
  field: STRAPI_AGE_GROUPFieldSelector;
};


type STRAPI_AGE_GROUPGroupConnection_sumArgs = {
  field: STRAPI_AGE_GROUPFieldSelector;
};

type STRAPI_AGE_GROUPLocalizations = {
  readonly data: Maybe<ReadonlyArray<Maybe<STRAPI_AGE_GROUPLocalizationsData>>>;
};

type STRAPI_AGE_GROUPLocalizationsData = {
  readonly attributes: Maybe<STRAPI_AGE_GROUPLocalizationsDataAttributes>;
  readonly id: Maybe<Scalars['Int']>;
};

type STRAPI_AGE_GROUPLocalizationsDataAttributes = {
  readonly color: Maybe<Scalars['String']>;
  readonly content: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly ingress: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly maximum_age: Maybe<Scalars['Int']>;
  readonly minimum_age: Maybe<Scalars['Int']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly wp_guid: Maybe<Scalars['String']>;
};


type STRAPI_AGE_GROUPLocalizationsDataAttributes_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_AGE_GROUPLocalizationsDataAttributes_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_AGE_GROUPLocalizationsDataAttributes_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_AGE_GROUPLocalizationsDataAttributesFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly ingress: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly maximum_age: InputMaybe<FieldSelectorEnum>;
  readonly minimum_age: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly wp_guid: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_AGE_GROUPLocalizationsDataAttributesFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly ingress: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly maximum_age: InputMaybe<IntQueryOperatorInput>;
  readonly minimum_age: InputMaybe<IntQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly wp_guid: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_AGE_GROUPLocalizationsDataAttributesSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly content: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly ingress: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly maximum_age: InputMaybe<SortOrderEnum>;
  readonly minimum_age: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly wp_guid: InputMaybe<SortOrderEnum>;
};

type STRAPI_AGE_GROUPLocalizationsDataFieldSelector = {
  readonly attributes: InputMaybe<STRAPI_AGE_GROUPLocalizationsDataAttributesFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_AGE_GROUPLocalizationsDataFilterInput = {
  readonly attributes: InputMaybe<STRAPI_AGE_GROUPLocalizationsDataAttributesFilterInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_AGE_GROUPLocalizationsDataFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_AGE_GROUPLocalizationsDataFilterInput>;
};

type STRAPI_AGE_GROUPLocalizationsDataSortInput = {
  readonly attributes: InputMaybe<STRAPI_AGE_GROUPLocalizationsDataAttributesSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
};

type STRAPI_AGE_GROUPLocalizationsFieldSelector = {
  readonly data: InputMaybe<STRAPI_AGE_GROUPLocalizationsDataFieldSelector>;
};

type STRAPI_AGE_GROUPLocalizationsFilterInput = {
  readonly data: InputMaybe<STRAPI_AGE_GROUPLocalizationsDataFilterListInput>;
};

type STRAPI_AGE_GROUPLocalizationsSortInput = {
  readonly data: InputMaybe<STRAPI_AGE_GROUPLocalizationsDataSortInput>;
};

type STRAPI_AGE_GROUPSortInput = {
  readonly activity_groups: InputMaybe<STRAPI_ACTIVITY_GROUPSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly content: InputMaybe<STRAPI_AGE_GROUPContentSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ingress: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly localizations: InputMaybe<STRAPI_AGE_GROUPLocalizationsSortInput>;
  readonly logo: InputMaybe<STRAPI__MEDIASortInput>;
  readonly lower_content_area: InputMaybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKSortInput>;
  readonly main_image: InputMaybe<STRAPI__MEDIASortInput>;
  readonly maximum_age: InputMaybe<SortOrderEnum>;
  readonly minimum_age: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly wp_guid: InputMaybe<SortOrderEnum>;
};

type STRAPI_AGE_GROUP_CONTENT_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_AGE_GROUP_CONTENT_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_AGE_GROUP_CONTENT_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_AGE_GROUP_CONTENT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_AGE_GROUP_CONTENT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_AGE_GROUP_CONTENT_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_AGE_GROUP_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_AGE_GROUP_CONTENT_TEXTNODEConnection_groupArgs = {
  field: STRAPI_AGE_GROUP_CONTENT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_AGE_GROUP_CONTENT_TEXTNODEConnection_maxArgs = {
  field: STRAPI_AGE_GROUP_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_AGE_GROUP_CONTENT_TEXTNODEConnection_minArgs = {
  field: STRAPI_AGE_GROUP_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_AGE_GROUP_CONTENT_TEXTNODEConnection_sumArgs = {
  field: STRAPI_AGE_GROUP_CONTENT_TEXTNODEFieldSelector;
};

type STRAPI_AGE_GROUP_CONTENT_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_AGE_GROUP_CONTENT_TEXTNODE>;
  readonly node: STRAPI_AGE_GROUP_CONTENT_TEXTNODE;
  readonly previous: Maybe<STRAPI_AGE_GROUP_CONTENT_TEXTNODE>;
};

type STRAPI_AGE_GROUP_CONTENT_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_AGE_GROUP_CONTENT_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_AGE_GROUP_CONTENT_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_AGE_GROUP_CONTENT_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_AGE_GROUP_CONTENT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_AGE_GROUP_CONTENT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_AGE_GROUP_CONTENT_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_AGE_GROUP_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_AGE_GROUP_CONTENT_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_AGE_GROUP_CONTENT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_AGE_GROUP_CONTENT_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_AGE_GROUP_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_AGE_GROUP_CONTENT_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_AGE_GROUP_CONTENT_TEXTNODEFieldSelector;
};


type STRAPI_AGE_GROUP_CONTENT_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_AGE_GROUP_CONTENT_TEXTNODEFieldSelector;
};

type STRAPI_AGE_GROUP_CONTENT_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_CONTENT_PAGE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKSTRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKUnion>>>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly ingress: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_CONTENT_PAGELocalizations>;
  readonly main_image: Maybe<STRAPI__MEDIA>;
  readonly main_text: Maybe<STRAPI_CONTENT_PAGEMain_text>;
  readonly meta_description: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_CONTENT_PAGE_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_CONTENT_PAGE_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_CONTENT_PAGE_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_CONTENT_PAGEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_CONTENT_PAGEEdge>;
  readonly group: ReadonlyArray<STRAPI_CONTENT_PAGEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_CONTENT_PAGE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_CONTENT_PAGEConnection_distinctArgs = {
  field: STRAPI_CONTENT_PAGEFieldSelector;
};


type STRAPI_CONTENT_PAGEConnection_groupArgs = {
  field: STRAPI_CONTENT_PAGEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_CONTENT_PAGEConnection_maxArgs = {
  field: STRAPI_CONTENT_PAGEFieldSelector;
};


type STRAPI_CONTENT_PAGEConnection_minArgs = {
  field: STRAPI_CONTENT_PAGEFieldSelector;
};


type STRAPI_CONTENT_PAGEConnection_sumArgs = {
  field: STRAPI_CONTENT_PAGEFieldSelector;
};

type STRAPI_CONTENT_PAGEEdge = {
  readonly next: Maybe<STRAPI_CONTENT_PAGE>;
  readonly node: STRAPI_CONTENT_PAGE;
  readonly previous: Maybe<STRAPI_CONTENT_PAGE>;
};

type STRAPI_CONTENT_PAGEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ingress: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly localizations: InputMaybe<STRAPI_CONTENT_PAGELocalizationsFieldSelector>;
  readonly main_image: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly main_text: InputMaybe<STRAPI_CONTENT_PAGEMain_textFieldSelector>;
  readonly meta_description: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_CONTENT_PAGEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ingress: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly localizations: InputMaybe<STRAPI_CONTENT_PAGELocalizationsFilterInput>;
  readonly main_image: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly main_text: InputMaybe<STRAPI_CONTENT_PAGEMain_textFilterInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_CONTENT_PAGEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_CONTENT_PAGEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_CONTENT_PAGEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_CONTENT_PAGE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_CONTENT_PAGEGroupConnection_distinctArgs = {
  field: STRAPI_CONTENT_PAGEFieldSelector;
};


type STRAPI_CONTENT_PAGEGroupConnection_groupArgs = {
  field: STRAPI_CONTENT_PAGEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_CONTENT_PAGEGroupConnection_maxArgs = {
  field: STRAPI_CONTENT_PAGEFieldSelector;
};


type STRAPI_CONTENT_PAGEGroupConnection_minArgs = {
  field: STRAPI_CONTENT_PAGEFieldSelector;
};


type STRAPI_CONTENT_PAGEGroupConnection_sumArgs = {
  field: STRAPI_CONTENT_PAGEFieldSelector;
};

type STRAPI_CONTENT_PAGELocalizations = {
  readonly data: Maybe<ReadonlyArray<Maybe<STRAPI_CONTENT_PAGELocalizationsData>>>;
};

type STRAPI_CONTENT_PAGELocalizationsData = {
  readonly attributes: Maybe<STRAPI_CONTENT_PAGELocalizationsDataAttributes>;
  readonly id: Maybe<Scalars['Int']>;
};

type STRAPI_CONTENT_PAGELocalizationsDataAttributes = {
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly ingress: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly main_text: Maybe<Scalars['String']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_CONTENT_PAGELocalizationsDataAttributes_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_CONTENT_PAGELocalizationsDataAttributes_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_CONTENT_PAGELocalizationsDataAttributes_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_CONTENT_PAGELocalizationsDataAttributesFieldSelector = {
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly ingress: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly main_text: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_CONTENT_PAGELocalizationsDataAttributesFilterInput = {
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly ingress: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly main_text: InputMaybe<StringQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_CONTENT_PAGELocalizationsDataAttributesSortInput = {
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly ingress: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly main_text: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_CONTENT_PAGELocalizationsDataFieldSelector = {
  readonly attributes: InputMaybe<STRAPI_CONTENT_PAGELocalizationsDataAttributesFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_CONTENT_PAGELocalizationsDataFilterInput = {
  readonly attributes: InputMaybe<STRAPI_CONTENT_PAGELocalizationsDataAttributesFilterInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_CONTENT_PAGELocalizationsDataFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_CONTENT_PAGELocalizationsDataFilterInput>;
};

type STRAPI_CONTENT_PAGELocalizationsDataSortInput = {
  readonly attributes: InputMaybe<STRAPI_CONTENT_PAGELocalizationsDataAttributesSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
};

type STRAPI_CONTENT_PAGELocalizationsFieldSelector = {
  readonly data: InputMaybe<STRAPI_CONTENT_PAGELocalizationsDataFieldSelector>;
};

type STRAPI_CONTENT_PAGELocalizationsFilterInput = {
  readonly data: InputMaybe<STRAPI_CONTENT_PAGELocalizationsDataFilterListInput>;
};

type STRAPI_CONTENT_PAGELocalizationsSortInput = {
  readonly data: InputMaybe<STRAPI_CONTENT_PAGELocalizationsDataSortInput>;
};

type STRAPI_CONTENT_PAGEMain_text = {
  readonly data: Maybe<STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODE>;
};

type STRAPI_CONTENT_PAGEMain_textFieldSelector = {
  readonly data: InputMaybe<STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEFieldSelector>;
};

type STRAPI_CONTENT_PAGEMain_textFilterInput = {
  readonly data: InputMaybe<STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEFilterInput>;
};

type STRAPI_CONTENT_PAGEMain_textSortInput = {
  readonly data: InputMaybe<STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODESortInput>;
};

type STRAPI_CONTENT_PAGESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ingress: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly localizations: InputMaybe<STRAPI_CONTENT_PAGELocalizationsSortInput>;
  readonly main_image: InputMaybe<STRAPI__MEDIASortInput>;
  readonly main_text: InputMaybe<STRAPI_CONTENT_PAGEMain_textSortInput>;
  readonly meta_description: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly main_text: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
};

type STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEConnection_groupArgs = {
  field: STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEConnection_maxArgs = {
  field: STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEConnection_minArgs = {
  field: STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEConnection_sumArgs = {
  field: STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEFieldSelector;
};

type STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODE>;
  readonly node: STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODE;
  readonly previous: Maybe<STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODE>;
};

type STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly main_text: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly main_text: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODEFieldSelector;
};

type STRAPI_CONTENT_PAGE_MAIN_TEXT_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly main_text: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_COOKIE_PAGE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly ingress: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_COOKIE_PAGELocalizations>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_COOKIE_PAGE_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_COOKIE_PAGE_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_COOKIE_PAGE_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_COOKIE_PAGEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_COOKIE_PAGEEdge>;
  readonly group: ReadonlyArray<STRAPI_COOKIE_PAGEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_COOKIE_PAGE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_COOKIE_PAGEConnection_distinctArgs = {
  field: STRAPI_COOKIE_PAGEFieldSelector;
};


type STRAPI_COOKIE_PAGEConnection_groupArgs = {
  field: STRAPI_COOKIE_PAGEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_COOKIE_PAGEConnection_maxArgs = {
  field: STRAPI_COOKIE_PAGEFieldSelector;
};


type STRAPI_COOKIE_PAGEConnection_minArgs = {
  field: STRAPI_COOKIE_PAGEFieldSelector;
};


type STRAPI_COOKIE_PAGEConnection_sumArgs = {
  field: STRAPI_COOKIE_PAGEFieldSelector;
};

type STRAPI_COOKIE_PAGEEdge = {
  readonly next: Maybe<STRAPI_COOKIE_PAGE>;
  readonly node: STRAPI_COOKIE_PAGE;
  readonly previous: Maybe<STRAPI_COOKIE_PAGE>;
};

type STRAPI_COOKIE_PAGEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ingress: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly localizations: InputMaybe<STRAPI_COOKIE_PAGELocalizationsFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_COOKIE_PAGEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ingress: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly localizations: InputMaybe<STRAPI_COOKIE_PAGELocalizationsFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_COOKIE_PAGEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_COOKIE_PAGEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_COOKIE_PAGEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_COOKIE_PAGE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_COOKIE_PAGEGroupConnection_distinctArgs = {
  field: STRAPI_COOKIE_PAGEFieldSelector;
};


type STRAPI_COOKIE_PAGEGroupConnection_groupArgs = {
  field: STRAPI_COOKIE_PAGEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_COOKIE_PAGEGroupConnection_maxArgs = {
  field: STRAPI_COOKIE_PAGEFieldSelector;
};


type STRAPI_COOKIE_PAGEGroupConnection_minArgs = {
  field: STRAPI_COOKIE_PAGEFieldSelector;
};


type STRAPI_COOKIE_PAGEGroupConnection_sumArgs = {
  field: STRAPI_COOKIE_PAGEFieldSelector;
};

type STRAPI_COOKIE_PAGELocalizations = {
  readonly data: Maybe<ReadonlyArray<Maybe<STRAPI_COOKIE_PAGELocalizationsData>>>;
};

type STRAPI_COOKIE_PAGELocalizationsData = {
  readonly attributes: Maybe<STRAPI_COOKIE_PAGELocalizationsDataAttributes>;
  readonly id: Maybe<Scalars['Int']>;
};

type STRAPI_COOKIE_PAGELocalizationsDataAttributes = {
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly ingress: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_COOKIE_PAGELocalizationsDataAttributes_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_COOKIE_PAGELocalizationsDataAttributes_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_COOKIE_PAGELocalizationsDataAttributes_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_COOKIE_PAGELocalizationsDataAttributesFieldSelector = {
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly ingress: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_COOKIE_PAGELocalizationsDataAttributesFilterInput = {
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly ingress: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_COOKIE_PAGELocalizationsDataAttributesSortInput = {
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly ingress: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_COOKIE_PAGELocalizationsDataFieldSelector = {
  readonly attributes: InputMaybe<STRAPI_COOKIE_PAGELocalizationsDataAttributesFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_COOKIE_PAGELocalizationsDataFilterInput = {
  readonly attributes: InputMaybe<STRAPI_COOKIE_PAGELocalizationsDataAttributesFilterInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_COOKIE_PAGELocalizationsDataFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_COOKIE_PAGELocalizationsDataFilterInput>;
};

type STRAPI_COOKIE_PAGELocalizationsDataSortInput = {
  readonly attributes: InputMaybe<STRAPI_COOKIE_PAGELocalizationsDataAttributesSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
};

type STRAPI_COOKIE_PAGELocalizationsFieldSelector = {
  readonly data: InputMaybe<STRAPI_COOKIE_PAGELocalizationsDataFieldSelector>;
};

type STRAPI_COOKIE_PAGELocalizationsFilterInput = {
  readonly data: InputMaybe<STRAPI_COOKIE_PAGELocalizationsDataFilterListInput>;
};

type STRAPI_COOKIE_PAGELocalizationsSortInput = {
  readonly data: InputMaybe<STRAPI_COOKIE_PAGELocalizationsDataSortInput>;
};

type STRAPI_COOKIE_PAGESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ingress: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly localizations: InputMaybe<STRAPI_COOKIE_PAGELocalizationsSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_DURATION = Node & {
  readonly activities: Maybe<ReadonlyArray<Maybe<STRAPI_ACTIVITY>>>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_DURATIONLocalizations>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly preparation_activities: Maybe<ReadonlyArray<Maybe<STRAPI_ACTIVITY>>>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_DURATION_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_DURATION_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_DURATIONConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_DURATIONEdge>;
  readonly group: ReadonlyArray<STRAPI_DURATIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_DURATION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_DURATIONConnection_distinctArgs = {
  field: STRAPI_DURATIONFieldSelector;
};


type STRAPI_DURATIONConnection_groupArgs = {
  field: STRAPI_DURATIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_DURATIONConnection_maxArgs = {
  field: STRAPI_DURATIONFieldSelector;
};


type STRAPI_DURATIONConnection_minArgs = {
  field: STRAPI_DURATIONFieldSelector;
};


type STRAPI_DURATIONConnection_sumArgs = {
  field: STRAPI_DURATIONFieldSelector;
};

type STRAPI_DURATIONEdge = {
  readonly next: Maybe<STRAPI_DURATION>;
  readonly node: STRAPI_DURATION;
  readonly previous: Maybe<STRAPI_DURATION>;
};

type STRAPI_DURATIONFieldSelector = {
  readonly activities: InputMaybe<STRAPI_ACTIVITYFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly localizations: InputMaybe<STRAPI_DURATIONLocalizationsFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly preparation_activities: InputMaybe<STRAPI_ACTIVITYFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_DURATIONFilterInput = {
  readonly activities: InputMaybe<STRAPI_ACTIVITYFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly localizations: InputMaybe<STRAPI_DURATIONLocalizationsFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly preparation_activities: InputMaybe<STRAPI_ACTIVITYFilterListInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_DURATIONGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_DURATIONEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_DURATIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_DURATION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_DURATIONGroupConnection_distinctArgs = {
  field: STRAPI_DURATIONFieldSelector;
};


type STRAPI_DURATIONGroupConnection_groupArgs = {
  field: STRAPI_DURATIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_DURATIONGroupConnection_maxArgs = {
  field: STRAPI_DURATIONFieldSelector;
};


type STRAPI_DURATIONGroupConnection_minArgs = {
  field: STRAPI_DURATIONFieldSelector;
};


type STRAPI_DURATIONGroupConnection_sumArgs = {
  field: STRAPI_DURATIONFieldSelector;
};

type STRAPI_DURATIONLocalizations = {
  readonly data: Maybe<ReadonlyArray<Maybe<STRAPI_DURATIONLocalizationsData>>>;
};

type STRAPI_DURATIONLocalizationsData = {
  readonly attributes: Maybe<STRAPI_DURATIONLocalizationsDataAttributes>;
  readonly id: Maybe<Scalars['Int']>;
};

type STRAPI_DURATIONLocalizationsDataAttributes = {
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_DURATIONLocalizationsDataAttributes_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_DURATIONLocalizationsDataAttributes_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_DURATIONLocalizationsDataAttributesFieldSelector = {
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_DURATIONLocalizationsDataAttributesFilterInput = {
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_DURATIONLocalizationsDataAttributesSortInput = {
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_DURATIONLocalizationsDataFieldSelector = {
  readonly attributes: InputMaybe<STRAPI_DURATIONLocalizationsDataAttributesFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_DURATIONLocalizationsDataFilterInput = {
  readonly attributes: InputMaybe<STRAPI_DURATIONLocalizationsDataAttributesFilterInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_DURATIONLocalizationsDataFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_DURATIONLocalizationsDataFilterInput>;
};

type STRAPI_DURATIONLocalizationsDataSortInput = {
  readonly attributes: InputMaybe<STRAPI_DURATIONLocalizationsDataAttributesSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
};

type STRAPI_DURATIONLocalizationsFieldSelector = {
  readonly data: InputMaybe<STRAPI_DURATIONLocalizationsDataFieldSelector>;
};

type STRAPI_DURATIONLocalizationsFilterInput = {
  readonly data: InputMaybe<STRAPI_DURATIONLocalizationsDataFilterListInput>;
};

type STRAPI_DURATIONLocalizationsSortInput = {
  readonly data: InputMaybe<STRAPI_DURATIONLocalizationsDataSortInput>;
};

type STRAPI_DURATIONSortInput = {
  readonly activities: InputMaybe<STRAPI_ACTIVITYSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly localizations: InputMaybe<STRAPI_DURATIONLocalizationsSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly preparation_activities: InputMaybe<STRAPI_ACTIVITYSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_EDUCATIONAL_OBJECTIVE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_EDUCATIONAL_OBJECTIVE_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_EDUCATIONAL_OBJECTIVE_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_EDUCATIONAL_OBJECTIVEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EDUCATIONAL_OBJECTIVEEdge>;
  readonly group: ReadonlyArray<STRAPI_EDUCATIONAL_OBJECTIVEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EDUCATIONAL_OBJECTIVE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EDUCATIONAL_OBJECTIVEConnection_distinctArgs = {
  field: STRAPI_EDUCATIONAL_OBJECTIVEFieldSelector;
};


type STRAPI_EDUCATIONAL_OBJECTIVEConnection_groupArgs = {
  field: STRAPI_EDUCATIONAL_OBJECTIVEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EDUCATIONAL_OBJECTIVEConnection_maxArgs = {
  field: STRAPI_EDUCATIONAL_OBJECTIVEFieldSelector;
};


type STRAPI_EDUCATIONAL_OBJECTIVEConnection_minArgs = {
  field: STRAPI_EDUCATIONAL_OBJECTIVEFieldSelector;
};


type STRAPI_EDUCATIONAL_OBJECTIVEConnection_sumArgs = {
  field: STRAPI_EDUCATIONAL_OBJECTIVEFieldSelector;
};

type STRAPI_EDUCATIONAL_OBJECTIVEEdge = {
  readonly next: Maybe<STRAPI_EDUCATIONAL_OBJECTIVE>;
  readonly node: STRAPI_EDUCATIONAL_OBJECTIVE;
  readonly previous: Maybe<STRAPI_EDUCATIONAL_OBJECTIVE>;
};

type STRAPI_EDUCATIONAL_OBJECTIVEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_EDUCATIONAL_OBJECTIVEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_EDUCATIONAL_OBJECTIVEFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_EDUCATIONAL_OBJECTIVEFilterInput>;
};

type STRAPI_EDUCATIONAL_OBJECTIVEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EDUCATIONAL_OBJECTIVEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EDUCATIONAL_OBJECTIVEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EDUCATIONAL_OBJECTIVE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EDUCATIONAL_OBJECTIVEGroupConnection_distinctArgs = {
  field: STRAPI_EDUCATIONAL_OBJECTIVEFieldSelector;
};


type STRAPI_EDUCATIONAL_OBJECTIVEGroupConnection_groupArgs = {
  field: STRAPI_EDUCATIONAL_OBJECTIVEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EDUCATIONAL_OBJECTIVEGroupConnection_maxArgs = {
  field: STRAPI_EDUCATIONAL_OBJECTIVEFieldSelector;
};


type STRAPI_EDUCATIONAL_OBJECTIVEGroupConnection_minArgs = {
  field: STRAPI_EDUCATIONAL_OBJECTIVEFieldSelector;
};


type STRAPI_EDUCATIONAL_OBJECTIVEGroupConnection_sumArgs = {
  field: STRAPI_EDUCATIONAL_OBJECTIVEFieldSelector;
};

type STRAPI_EDUCATIONAL_OBJECTIVESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_FRONT_PAGE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKSTRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKSTRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKSTRAPI__COMPONENT_BLOCKS_HERO_BLOCKSTRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKSTRAPI__COMPONENT_BLOCKS_LINK_BLOCKSTRAPI__COMPONENT_BLOCKS_TEXT_BLOCKSTRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKUnion>>>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly footer_sections: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_FOOTER_FOOTER_SECTION>>>;
  readonly hero_image: Maybe<STRAPI__MEDIA>;
  readonly hero_link_text: Maybe<Scalars['String']>;
  readonly hero_link_url: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly ingress: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_FRONT_PAGELocalizations>;
  readonly meta_description: Maybe<Scalars['String']>;
  readonly meta_title: Maybe<Scalars['String']>;
  readonly navigation: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_NAVIGATION_NAVIGATION>>>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_FRONT_PAGE_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_FRONT_PAGE_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_FRONT_PAGE_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_FRONT_PAGEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_FRONT_PAGEEdge>;
  readonly group: ReadonlyArray<STRAPI_FRONT_PAGEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_FRONT_PAGE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_FRONT_PAGEConnection_distinctArgs = {
  field: STRAPI_FRONT_PAGEFieldSelector;
};


type STRAPI_FRONT_PAGEConnection_groupArgs = {
  field: STRAPI_FRONT_PAGEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_FRONT_PAGEConnection_maxArgs = {
  field: STRAPI_FRONT_PAGEFieldSelector;
};


type STRAPI_FRONT_PAGEConnection_minArgs = {
  field: STRAPI_FRONT_PAGEFieldSelector;
};


type STRAPI_FRONT_PAGEConnection_sumArgs = {
  field: STRAPI_FRONT_PAGEFieldSelector;
};

type STRAPI_FRONT_PAGEEdge = {
  readonly next: Maybe<STRAPI_FRONT_PAGE>;
  readonly node: STRAPI_FRONT_PAGE;
  readonly previous: Maybe<STRAPI_FRONT_PAGE>;
};

type STRAPI_FRONT_PAGEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly footer_sections: InputMaybe<STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFieldSelector>;
  readonly hero_image: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly hero_link_text: InputMaybe<FieldSelectorEnum>;
  readonly hero_link_url: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ingress: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly localizations: InputMaybe<STRAPI_FRONT_PAGELocalizationsFieldSelector>;
  readonly meta_description: InputMaybe<FieldSelectorEnum>;
  readonly meta_title: InputMaybe<FieldSelectorEnum>;
  readonly navigation: InputMaybe<STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_FRONT_PAGEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly footer_sections: InputMaybe<STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFilterListInput>;
  readonly hero_image: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly hero_link_text: InputMaybe<StringQueryOperatorInput>;
  readonly hero_link_url: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ingress: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly localizations: InputMaybe<STRAPI_FRONT_PAGELocalizationsFilterInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
  readonly navigation: InputMaybe<STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_FRONT_PAGEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_FRONT_PAGEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_FRONT_PAGEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_FRONT_PAGE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_FRONT_PAGEGroupConnection_distinctArgs = {
  field: STRAPI_FRONT_PAGEFieldSelector;
};


type STRAPI_FRONT_PAGEGroupConnection_groupArgs = {
  field: STRAPI_FRONT_PAGEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_FRONT_PAGEGroupConnection_maxArgs = {
  field: STRAPI_FRONT_PAGEFieldSelector;
};


type STRAPI_FRONT_PAGEGroupConnection_minArgs = {
  field: STRAPI_FRONT_PAGEFieldSelector;
};


type STRAPI_FRONT_PAGEGroupConnection_sumArgs = {
  field: STRAPI_FRONT_PAGEFieldSelector;
};

type STRAPI_FRONT_PAGELocalizations = {
  readonly data: Maybe<ReadonlyArray<Maybe<STRAPI_FRONT_PAGELocalizationsData>>>;
};

type STRAPI_FRONT_PAGELocalizationsData = {
  readonly attributes: Maybe<STRAPI_FRONT_PAGELocalizationsDataAttributes>;
  readonly id: Maybe<Scalars['Int']>;
};

type STRAPI_FRONT_PAGELocalizationsDataAttributes = {
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly hero_link_text: Maybe<Scalars['String']>;
  readonly hero_link_url: Maybe<Scalars['String']>;
  readonly ingress: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly meta_description: Maybe<Scalars['String']>;
  readonly meta_title: Maybe<Scalars['String']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_FRONT_PAGELocalizationsDataAttributes_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_FRONT_PAGELocalizationsDataAttributes_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_FRONT_PAGELocalizationsDataAttributes_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_FRONT_PAGELocalizationsDataAttributesFieldSelector = {
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly hero_link_text: InputMaybe<FieldSelectorEnum>;
  readonly hero_link_url: InputMaybe<FieldSelectorEnum>;
  readonly ingress: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly meta_description: InputMaybe<FieldSelectorEnum>;
  readonly meta_title: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_FRONT_PAGELocalizationsDataAttributesFilterInput = {
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly hero_link_text: InputMaybe<StringQueryOperatorInput>;
  readonly hero_link_url: InputMaybe<StringQueryOperatorInput>;
  readonly ingress: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_FRONT_PAGELocalizationsDataAttributesSortInput = {
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly hero_link_text: InputMaybe<SortOrderEnum>;
  readonly hero_link_url: InputMaybe<SortOrderEnum>;
  readonly ingress: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly meta_description: InputMaybe<SortOrderEnum>;
  readonly meta_title: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_FRONT_PAGELocalizationsDataFieldSelector = {
  readonly attributes: InputMaybe<STRAPI_FRONT_PAGELocalizationsDataAttributesFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_FRONT_PAGELocalizationsDataFilterInput = {
  readonly attributes: InputMaybe<STRAPI_FRONT_PAGELocalizationsDataAttributesFilterInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_FRONT_PAGELocalizationsDataFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_FRONT_PAGELocalizationsDataFilterInput>;
};

type STRAPI_FRONT_PAGELocalizationsDataSortInput = {
  readonly attributes: InputMaybe<STRAPI_FRONT_PAGELocalizationsDataAttributesSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
};

type STRAPI_FRONT_PAGELocalizationsFieldSelector = {
  readonly data: InputMaybe<STRAPI_FRONT_PAGELocalizationsDataFieldSelector>;
};

type STRAPI_FRONT_PAGELocalizationsFilterInput = {
  readonly data: InputMaybe<STRAPI_FRONT_PAGELocalizationsDataFilterListInput>;
};

type STRAPI_FRONT_PAGELocalizationsSortInput = {
  readonly data: InputMaybe<STRAPI_FRONT_PAGELocalizationsDataSortInput>;
};

type STRAPI_FRONT_PAGESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly footer_sections: InputMaybe<STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONSortInput>;
  readonly hero_image: InputMaybe<STRAPI__MEDIASortInput>;
  readonly hero_link_text: InputMaybe<SortOrderEnum>;
  readonly hero_link_url: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ingress: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly localizations: InputMaybe<STRAPI_FRONT_PAGELocalizationsSortInput>;
  readonly meta_description: InputMaybe<SortOrderEnum>;
  readonly meta_title: InputMaybe<SortOrderEnum>;
  readonly navigation: InputMaybe<STRAPI__COMPONENT_NAVIGATION_NAVIGATIONSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_GROUP_SIZE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_GROUP_SIZE_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_GROUP_SIZE_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_GROUP_SIZEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_GROUP_SIZEEdge>;
  readonly group: ReadonlyArray<STRAPI_GROUP_SIZEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_GROUP_SIZE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_GROUP_SIZEConnection_distinctArgs = {
  field: STRAPI_GROUP_SIZEFieldSelector;
};


type STRAPI_GROUP_SIZEConnection_groupArgs = {
  field: STRAPI_GROUP_SIZEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_GROUP_SIZEConnection_maxArgs = {
  field: STRAPI_GROUP_SIZEFieldSelector;
};


type STRAPI_GROUP_SIZEConnection_minArgs = {
  field: STRAPI_GROUP_SIZEFieldSelector;
};


type STRAPI_GROUP_SIZEConnection_sumArgs = {
  field: STRAPI_GROUP_SIZEFieldSelector;
};

type STRAPI_GROUP_SIZEEdge = {
  readonly next: Maybe<STRAPI_GROUP_SIZE>;
  readonly node: STRAPI_GROUP_SIZE;
  readonly previous: Maybe<STRAPI_GROUP_SIZE>;
};

type STRAPI_GROUP_SIZEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_GROUP_SIZEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_GROUP_SIZEFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_GROUP_SIZEFilterInput>;
};

type STRAPI_GROUP_SIZEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_GROUP_SIZEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_GROUP_SIZEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_GROUP_SIZE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_GROUP_SIZEGroupConnection_distinctArgs = {
  field: STRAPI_GROUP_SIZEFieldSelector;
};


type STRAPI_GROUP_SIZEGroupConnection_groupArgs = {
  field: STRAPI_GROUP_SIZEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_GROUP_SIZEGroupConnection_maxArgs = {
  field: STRAPI_GROUP_SIZEFieldSelector;
};


type STRAPI_GROUP_SIZEGroupConnection_minArgs = {
  field: STRAPI_GROUP_SIZEFieldSelector;
};


type STRAPI_GROUP_SIZEGroupConnection_sumArgs = {
  field: STRAPI_GROUP_SIZEFieldSelector;
};

type STRAPI_GROUP_SIZESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_LEADER_SKILL = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_LEADER_SKILL_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_LEADER_SKILL_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_LEADER_SKILLConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LEADER_SKILLEdge>;
  readonly group: ReadonlyArray<STRAPI_LEADER_SKILLGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LEADER_SKILL>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LEADER_SKILLConnection_distinctArgs = {
  field: STRAPI_LEADER_SKILLFieldSelector;
};


type STRAPI_LEADER_SKILLConnection_groupArgs = {
  field: STRAPI_LEADER_SKILLFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LEADER_SKILLConnection_maxArgs = {
  field: STRAPI_LEADER_SKILLFieldSelector;
};


type STRAPI_LEADER_SKILLConnection_minArgs = {
  field: STRAPI_LEADER_SKILLFieldSelector;
};


type STRAPI_LEADER_SKILLConnection_sumArgs = {
  field: STRAPI_LEADER_SKILLFieldSelector;
};

type STRAPI_LEADER_SKILLEdge = {
  readonly next: Maybe<STRAPI_LEADER_SKILL>;
  readonly node: STRAPI_LEADER_SKILL;
  readonly previous: Maybe<STRAPI_LEADER_SKILL>;
};

type STRAPI_LEADER_SKILLFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_LEADER_SKILLFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_LEADER_SKILLFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_LEADER_SKILLFilterInput>;
};

type STRAPI_LEADER_SKILLGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LEADER_SKILLEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_LEADER_SKILLGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LEADER_SKILL>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LEADER_SKILLGroupConnection_distinctArgs = {
  field: STRAPI_LEADER_SKILLFieldSelector;
};


type STRAPI_LEADER_SKILLGroupConnection_groupArgs = {
  field: STRAPI_LEADER_SKILLFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LEADER_SKILLGroupConnection_maxArgs = {
  field: STRAPI_LEADER_SKILLFieldSelector;
};


type STRAPI_LEADER_SKILLGroupConnection_minArgs = {
  field: STRAPI_LEADER_SKILLFieldSelector;
};


type STRAPI_LEADER_SKILLGroupConnection_sumArgs = {
  field: STRAPI_LEADER_SKILLFieldSelector;
};

type STRAPI_LEADER_SKILLSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_LOCATION = Node & {
  readonly activities: Maybe<ReadonlyArray<Maybe<STRAPI_ACTIVITY>>>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly icon: Maybe<STRAPI__MEDIA>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_LOCATIONLocalizations>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_LOCATION_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_LOCATION_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_LOCATIONConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOCATIONEdge>;
  readonly group: ReadonlyArray<STRAPI_LOCATIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOCATION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOCATIONConnection_distinctArgs = {
  field: STRAPI_LOCATIONFieldSelector;
};


type STRAPI_LOCATIONConnection_groupArgs = {
  field: STRAPI_LOCATIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOCATIONConnection_maxArgs = {
  field: STRAPI_LOCATIONFieldSelector;
};


type STRAPI_LOCATIONConnection_minArgs = {
  field: STRAPI_LOCATIONFieldSelector;
};


type STRAPI_LOCATIONConnection_sumArgs = {
  field: STRAPI_LOCATIONFieldSelector;
};

type STRAPI_LOCATIONEdge = {
  readonly next: Maybe<STRAPI_LOCATION>;
  readonly node: STRAPI_LOCATION;
  readonly previous: Maybe<STRAPI_LOCATION>;
};

type STRAPI_LOCATIONFieldSelector = {
  readonly activities: InputMaybe<STRAPI_ACTIVITYFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly localizations: InputMaybe<STRAPI_LOCATIONLocalizationsFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_LOCATIONFilterInput = {
  readonly activities: InputMaybe<STRAPI_ACTIVITYFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly icon: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly localizations: InputMaybe<STRAPI_LOCATIONLocalizationsFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_LOCATIONFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_LOCATIONFilterInput>;
};

type STRAPI_LOCATIONGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOCATIONEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_LOCATIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOCATION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOCATIONGroupConnection_distinctArgs = {
  field: STRAPI_LOCATIONFieldSelector;
};


type STRAPI_LOCATIONGroupConnection_groupArgs = {
  field: STRAPI_LOCATIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOCATIONGroupConnection_maxArgs = {
  field: STRAPI_LOCATIONFieldSelector;
};


type STRAPI_LOCATIONGroupConnection_minArgs = {
  field: STRAPI_LOCATIONFieldSelector;
};


type STRAPI_LOCATIONGroupConnection_sumArgs = {
  field: STRAPI_LOCATIONFieldSelector;
};

type STRAPI_LOCATIONLocalizations = {
  readonly data: Maybe<ReadonlyArray<Maybe<STRAPI_LOCATIONLocalizationsData>>>;
};

type STRAPI_LOCATIONLocalizationsData = {
  readonly attributes: Maybe<STRAPI_LOCATIONLocalizationsDataAttributes>;
  readonly id: Maybe<Scalars['Int']>;
};

type STRAPI_LOCATIONLocalizationsDataAttributes = {
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_LOCATIONLocalizationsDataAttributes_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_LOCATIONLocalizationsDataAttributes_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_LOCATIONLocalizationsDataAttributesFieldSelector = {
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_LOCATIONLocalizationsDataAttributesFilterInput = {
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_LOCATIONLocalizationsDataAttributesSortInput = {
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_LOCATIONLocalizationsDataFieldSelector = {
  readonly attributes: InputMaybe<STRAPI_LOCATIONLocalizationsDataAttributesFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_LOCATIONLocalizationsDataFilterInput = {
  readonly attributes: InputMaybe<STRAPI_LOCATIONLocalizationsDataAttributesFilterInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_LOCATIONLocalizationsDataFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_LOCATIONLocalizationsDataFilterInput>;
};

type STRAPI_LOCATIONLocalizationsDataSortInput = {
  readonly attributes: InputMaybe<STRAPI_LOCATIONLocalizationsDataAttributesSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
};

type STRAPI_LOCATIONLocalizationsFieldSelector = {
  readonly data: InputMaybe<STRAPI_LOCATIONLocalizationsDataFieldSelector>;
};

type STRAPI_LOCATIONLocalizationsFilterInput = {
  readonly data: InputMaybe<STRAPI_LOCATIONLocalizationsDataFilterListInput>;
};

type STRAPI_LOCATIONLocalizationsSortInput = {
  readonly data: InputMaybe<STRAPI_LOCATIONLocalizationsDataSortInput>;
};

type STRAPI_LOCATIONSortInput = {
  readonly activities: InputMaybe<STRAPI_ACTIVITYSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<STRAPI__MEDIASortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly localizations: InputMaybe<STRAPI_LOCATIONLocalizationsSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_NOT_FOUND_PAGE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_BLOCKS_HERO_BLOCKSTRAPI__COMPONENT_BLOCKS_LINK_BLOCKUnion>>>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly ingress: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_NOT_FOUND_PAGELocalizations>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_NOT_FOUND_PAGE_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_NOT_FOUND_PAGE_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_NOT_FOUND_PAGE_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_NOT_FOUND_PAGEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_NOT_FOUND_PAGEEdge>;
  readonly group: ReadonlyArray<STRAPI_NOT_FOUND_PAGEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_NOT_FOUND_PAGE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_NOT_FOUND_PAGEConnection_distinctArgs = {
  field: STRAPI_NOT_FOUND_PAGEFieldSelector;
};


type STRAPI_NOT_FOUND_PAGEConnection_groupArgs = {
  field: STRAPI_NOT_FOUND_PAGEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_NOT_FOUND_PAGEConnection_maxArgs = {
  field: STRAPI_NOT_FOUND_PAGEFieldSelector;
};


type STRAPI_NOT_FOUND_PAGEConnection_minArgs = {
  field: STRAPI_NOT_FOUND_PAGEFieldSelector;
};


type STRAPI_NOT_FOUND_PAGEConnection_sumArgs = {
  field: STRAPI_NOT_FOUND_PAGEFieldSelector;
};

type STRAPI_NOT_FOUND_PAGEEdge = {
  readonly next: Maybe<STRAPI_NOT_FOUND_PAGE>;
  readonly node: STRAPI_NOT_FOUND_PAGE;
  readonly previous: Maybe<STRAPI_NOT_FOUND_PAGE>;
};

type STRAPI_NOT_FOUND_PAGEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ingress: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly localizations: InputMaybe<STRAPI_NOT_FOUND_PAGELocalizationsFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_NOT_FOUND_PAGEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ingress: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly localizations: InputMaybe<STRAPI_NOT_FOUND_PAGELocalizationsFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_NOT_FOUND_PAGEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_NOT_FOUND_PAGEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_NOT_FOUND_PAGEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_NOT_FOUND_PAGE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_NOT_FOUND_PAGEGroupConnection_distinctArgs = {
  field: STRAPI_NOT_FOUND_PAGEFieldSelector;
};


type STRAPI_NOT_FOUND_PAGEGroupConnection_groupArgs = {
  field: STRAPI_NOT_FOUND_PAGEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_NOT_FOUND_PAGEGroupConnection_maxArgs = {
  field: STRAPI_NOT_FOUND_PAGEFieldSelector;
};


type STRAPI_NOT_FOUND_PAGEGroupConnection_minArgs = {
  field: STRAPI_NOT_FOUND_PAGEFieldSelector;
};


type STRAPI_NOT_FOUND_PAGEGroupConnection_sumArgs = {
  field: STRAPI_NOT_FOUND_PAGEFieldSelector;
};

type STRAPI_NOT_FOUND_PAGELocalizations = {
  readonly data: Maybe<ReadonlyArray<Maybe<STRAPI_NOT_FOUND_PAGELocalizationsData>>>;
};

type STRAPI_NOT_FOUND_PAGELocalizationsData = {
  readonly attributes: Maybe<STRAPI_NOT_FOUND_PAGELocalizationsDataAttributes>;
  readonly id: Maybe<Scalars['Int']>;
};

type STRAPI_NOT_FOUND_PAGELocalizationsDataAttributes = {
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly ingress: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_NOT_FOUND_PAGELocalizationsDataAttributes_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_NOT_FOUND_PAGELocalizationsDataAttributes_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_NOT_FOUND_PAGELocalizationsDataAttributes_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_NOT_FOUND_PAGELocalizationsDataAttributesFieldSelector = {
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly ingress: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_NOT_FOUND_PAGELocalizationsDataAttributesFilterInput = {
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly ingress: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_NOT_FOUND_PAGELocalizationsDataAttributesSortInput = {
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly ingress: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_NOT_FOUND_PAGELocalizationsDataFieldSelector = {
  readonly attributes: InputMaybe<STRAPI_NOT_FOUND_PAGELocalizationsDataAttributesFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_NOT_FOUND_PAGELocalizationsDataFilterInput = {
  readonly attributes: InputMaybe<STRAPI_NOT_FOUND_PAGELocalizationsDataAttributesFilterInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_NOT_FOUND_PAGELocalizationsDataFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_NOT_FOUND_PAGELocalizationsDataFilterInput>;
};

type STRAPI_NOT_FOUND_PAGELocalizationsDataSortInput = {
  readonly attributes: InputMaybe<STRAPI_NOT_FOUND_PAGELocalizationsDataAttributesSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
};

type STRAPI_NOT_FOUND_PAGELocalizationsFieldSelector = {
  readonly data: InputMaybe<STRAPI_NOT_FOUND_PAGELocalizationsDataFieldSelector>;
};

type STRAPI_NOT_FOUND_PAGELocalizationsFilterInput = {
  readonly data: InputMaybe<STRAPI_NOT_FOUND_PAGELocalizationsDataFilterListInput>;
};

type STRAPI_NOT_FOUND_PAGELocalizationsSortInput = {
  readonly data: InputMaybe<STRAPI_NOT_FOUND_PAGELocalizationsDataSortInput>;
};

type STRAPI_NOT_FOUND_PAGESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ingress: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly localizations: InputMaybe<STRAPI_NOT_FOUND_PAGELocalizationsSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_SKILL_AREA = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_SKILL_AREA_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_SKILL_AREA_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_SKILL_AREAConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SKILL_AREAEdge>;
  readonly group: ReadonlyArray<STRAPI_SKILL_AREAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SKILL_AREA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SKILL_AREAConnection_distinctArgs = {
  field: STRAPI_SKILL_AREAFieldSelector;
};


type STRAPI_SKILL_AREAConnection_groupArgs = {
  field: STRAPI_SKILL_AREAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SKILL_AREAConnection_maxArgs = {
  field: STRAPI_SKILL_AREAFieldSelector;
};


type STRAPI_SKILL_AREAConnection_minArgs = {
  field: STRAPI_SKILL_AREAFieldSelector;
};


type STRAPI_SKILL_AREAConnection_sumArgs = {
  field: STRAPI_SKILL_AREAFieldSelector;
};

type STRAPI_SKILL_AREAEdge = {
  readonly next: Maybe<STRAPI_SKILL_AREA>;
  readonly node: STRAPI_SKILL_AREA;
  readonly previous: Maybe<STRAPI_SKILL_AREA>;
};

type STRAPI_SKILL_AREAFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_SKILL_AREAFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_SKILL_AREAFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_SKILL_AREAFilterInput>;
};

type STRAPI_SKILL_AREAGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SKILL_AREAEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_SKILL_AREAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SKILL_AREA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SKILL_AREAGroupConnection_distinctArgs = {
  field: STRAPI_SKILL_AREAFieldSelector;
};


type STRAPI_SKILL_AREAGroupConnection_groupArgs = {
  field: STRAPI_SKILL_AREAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SKILL_AREAGroupConnection_maxArgs = {
  field: STRAPI_SKILL_AREAFieldSelector;
};


type STRAPI_SKILL_AREAGroupConnection_minArgs = {
  field: STRAPI_SKILL_AREAFieldSelector;
};


type STRAPI_SKILL_AREAGroupConnection_sumArgs = {
  field: STRAPI_SKILL_AREAFieldSelector;
};

type STRAPI_SKILL_AREASortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_SUGGESTION = Node & {
  readonly activity: Maybe<STRAPI_ACTIVITY>;
  readonly author: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly duration: Maybe<STRAPI_DURATION>;
  readonly files: Maybe<ReadonlyArray<Maybe<STRAPI__MEDIA>>>;
  readonly from_web: Maybe<Scalars['Boolean']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly like_count: Maybe<Scalars['Int']>;
  readonly links: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_LINKS_LINK>>>;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_SUGGESTIONLocalizations>;
  readonly locations: Maybe<ReadonlyArray<Maybe<STRAPI_LOCATION>>>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly wp_guid: Maybe<Scalars['String']>;
};


type STRAPI_SUGGESTION_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_SUGGESTION_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_SUGGESTION_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_SUGGESTIONConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SUGGESTIONEdge>;
  readonly group: ReadonlyArray<STRAPI_SUGGESTIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SUGGESTION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SUGGESTIONConnection_distinctArgs = {
  field: STRAPI_SUGGESTIONFieldSelector;
};


type STRAPI_SUGGESTIONConnection_groupArgs = {
  field: STRAPI_SUGGESTIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SUGGESTIONConnection_maxArgs = {
  field: STRAPI_SUGGESTIONFieldSelector;
};


type STRAPI_SUGGESTIONConnection_minArgs = {
  field: STRAPI_SUGGESTIONFieldSelector;
};


type STRAPI_SUGGESTIONConnection_sumArgs = {
  field: STRAPI_SUGGESTIONFieldSelector;
};

type STRAPI_SUGGESTIONEdge = {
  readonly next: Maybe<STRAPI_SUGGESTION>;
  readonly node: STRAPI_SUGGESTION;
  readonly previous: Maybe<STRAPI_SUGGESTION>;
};

type STRAPI_SUGGESTIONFieldSelector = {
  readonly activity: InputMaybe<STRAPI_ACTIVITYFieldSelector>;
  readonly author: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly duration: InputMaybe<STRAPI_DURATIONFieldSelector>;
  readonly files: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly from_web: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly like_count: InputMaybe<FieldSelectorEnum>;
  readonly links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly localizations: InputMaybe<STRAPI_SUGGESTIONLocalizationsFieldSelector>;
  readonly locations: InputMaybe<STRAPI_LOCATIONFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly wp_guid: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_SUGGESTIONFilterInput = {
  readonly activity: InputMaybe<STRAPI_ACTIVITYFilterInput>;
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly duration: InputMaybe<STRAPI_DURATIONFilterInput>;
  readonly files: InputMaybe<STRAPI__MEDIAFilterListInput>;
  readonly from_web: InputMaybe<BooleanQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly like_count: InputMaybe<IntQueryOperatorInput>;
  readonly links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKFilterListInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly localizations: InputMaybe<STRAPI_SUGGESTIONLocalizationsFilterInput>;
  readonly locations: InputMaybe<STRAPI_LOCATIONFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly wp_guid: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_SUGGESTIONFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_SUGGESTIONFilterInput>;
};

type STRAPI_SUGGESTIONGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SUGGESTIONEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_SUGGESTIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SUGGESTION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SUGGESTIONGroupConnection_distinctArgs = {
  field: STRAPI_SUGGESTIONFieldSelector;
};


type STRAPI_SUGGESTIONGroupConnection_groupArgs = {
  field: STRAPI_SUGGESTIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SUGGESTIONGroupConnection_maxArgs = {
  field: STRAPI_SUGGESTIONFieldSelector;
};


type STRAPI_SUGGESTIONGroupConnection_minArgs = {
  field: STRAPI_SUGGESTIONFieldSelector;
};


type STRAPI_SUGGESTIONGroupConnection_sumArgs = {
  field: STRAPI_SUGGESTIONFieldSelector;
};

type STRAPI_SUGGESTIONLocalizations = {
  readonly data: Maybe<ReadonlyArray<Maybe<STRAPI_SUGGESTIONLocalizationsData>>>;
};

type STRAPI_SUGGESTIONLocalizationsData = {
  readonly attributes: Maybe<STRAPI_SUGGESTIONLocalizationsDataAttributes>;
  readonly id: Maybe<Scalars['Int']>;
};

type STRAPI_SUGGESTIONLocalizationsDataAttributes = {
  readonly author: Maybe<Scalars['String']>;
  readonly content: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly from_web: Maybe<Scalars['Boolean']>;
  readonly like_count: Maybe<Scalars['Int']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly wp_guid: Maybe<Scalars['String']>;
};


type STRAPI_SUGGESTIONLocalizationsDataAttributes_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_SUGGESTIONLocalizationsDataAttributes_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_SUGGESTIONLocalizationsDataAttributes_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_SUGGESTIONLocalizationsDataAttributesFieldSelector = {
  readonly author: InputMaybe<FieldSelectorEnum>;
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly from_web: InputMaybe<FieldSelectorEnum>;
  readonly like_count: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly wp_guid: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_SUGGESTIONLocalizationsDataAttributesFilterInput = {
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly from_web: InputMaybe<BooleanQueryOperatorInput>;
  readonly like_count: InputMaybe<IntQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly wp_guid: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_SUGGESTIONLocalizationsDataAttributesSortInput = {
  readonly author: InputMaybe<SortOrderEnum>;
  readonly content: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly from_web: InputMaybe<SortOrderEnum>;
  readonly like_count: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly wp_guid: InputMaybe<SortOrderEnum>;
};

type STRAPI_SUGGESTIONLocalizationsDataFieldSelector = {
  readonly attributes: InputMaybe<STRAPI_SUGGESTIONLocalizationsDataAttributesFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_SUGGESTIONLocalizationsDataFilterInput = {
  readonly attributes: InputMaybe<STRAPI_SUGGESTIONLocalizationsDataAttributesFilterInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_SUGGESTIONLocalizationsDataFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_SUGGESTIONLocalizationsDataFilterInput>;
};

type STRAPI_SUGGESTIONLocalizationsDataSortInput = {
  readonly attributes: InputMaybe<STRAPI_SUGGESTIONLocalizationsDataAttributesSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
};

type STRAPI_SUGGESTIONLocalizationsFieldSelector = {
  readonly data: InputMaybe<STRAPI_SUGGESTIONLocalizationsDataFieldSelector>;
};

type STRAPI_SUGGESTIONLocalizationsFilterInput = {
  readonly data: InputMaybe<STRAPI_SUGGESTIONLocalizationsDataFilterListInput>;
};

type STRAPI_SUGGESTIONLocalizationsSortInput = {
  readonly data: InputMaybe<STRAPI_SUGGESTIONLocalizationsDataSortInput>;
};

type STRAPI_SUGGESTIONSortInput = {
  readonly activity: InputMaybe<STRAPI_ACTIVITYSortInput>;
  readonly author: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly duration: InputMaybe<STRAPI_DURATIONSortInput>;
  readonly files: InputMaybe<STRAPI__MEDIASortInput>;
  readonly from_web: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly like_count: InputMaybe<SortOrderEnum>;
  readonly links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly localizations: InputMaybe<STRAPI_SUGGESTIONLocalizationsSortInput>;
  readonly locations: InputMaybe<STRAPI_LOCATIONSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly wp_guid: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCK = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_component: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
};

type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCK>;
  readonly node: STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCK;
  readonly previous: Maybe<STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCK>;
};

type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_component: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_component: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKSTRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKSTRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKSTRAPI__COMPONENT_BLOCKS_HERO_BLOCKSTRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKSTRAPI__COMPONENT_BLOCKS_LINK_BLOCKSTRAPI__COMPONENT_BLOCKS_TEXT_BLOCKSTRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKUnion = STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCK | STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK | STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCK | STRAPI__COMPONENT_BLOCKS_HERO_BLOCK | STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCK | STRAPI__COMPONENT_BLOCKS_LINK_BLOCK | STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK | STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCK;

type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKSTRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKUnion = STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCK | STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK;

type STRAPI__COMPONENT_BLOCKS_ACTIVITY_BLOCKSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_component: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly ingress: Maybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKIngress>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_component: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK>;
  readonly node: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK;
  readonly previous: Maybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK>;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ingress: InputMaybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKIngressFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_component: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ingress: InputMaybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKIngressFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_component: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKIngress = {
  readonly data: Maybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODE>;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKIngressFieldSelector = {
  readonly data: InputMaybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEFieldSelector>;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKIngressFilterInput = {
  readonly data: InputMaybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEFilterInput>;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKIngressSortInput = {
  readonly data: InputMaybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODESortInput>;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ingress: InputMaybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCKIngressSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_component: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly ingress: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODE>;
  readonly node: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODE;
  readonly previous: Maybe<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODE>;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ingress: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ingress: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODEFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_AGE_GROUP_BLOCK_INGRESS_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ingress: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCK = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_component: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
};

type STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCK>;
  readonly node: STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCK;
  readonly previous: Maybe<STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCK>;
};

type STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_component: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_component: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_CONTENT_PAGE_BLOCKSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_component: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_BLOCKS_HERO_BLOCK = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly link_text: Maybe<Scalars['String']>;
  readonly link_url: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly strapi_component: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly text: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_BLOCKS_HERO_BLOCKConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_HERO_BLOCKEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_HERO_BLOCKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_HERO_BLOCK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_HERO_BLOCKConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_HERO_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_HERO_BLOCKConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_HERO_BLOCKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_HERO_BLOCKConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_HERO_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_HERO_BLOCKConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_HERO_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_HERO_BLOCKConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_HERO_BLOCKFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_HERO_BLOCKEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_BLOCKS_HERO_BLOCK>;
  readonly node: STRAPI__COMPONENT_BLOCKS_HERO_BLOCK;
  readonly previous: Maybe<STRAPI__COMPONENT_BLOCKS_HERO_BLOCK>;
};

type STRAPI__COMPONENT_BLOCKS_HERO_BLOCKFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly link_text: InputMaybe<FieldSelectorEnum>;
  readonly link_url: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_component: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_BLOCKS_HERO_BLOCKFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly link_text: InputMaybe<StringQueryOperatorInput>;
  readonly link_url: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_component: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_BLOCKS_HERO_BLOCKGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_HERO_BLOCKEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_HERO_BLOCKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_HERO_BLOCK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_HERO_BLOCKGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_HERO_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_HERO_BLOCKGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_HERO_BLOCKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_HERO_BLOCKGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_HERO_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_HERO_BLOCKGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_HERO_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_HERO_BLOCKGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_HERO_BLOCKFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_HERO_BLOCKSTRAPI__COMPONENT_BLOCKS_LINK_BLOCKUnion = STRAPI__COMPONENT_BLOCKS_HERO_BLOCK | STRAPI__COMPONENT_BLOCKS_LINK_BLOCK;

type STRAPI__COMPONENT_BLOCKS_HERO_BLOCKSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly link_text: InputMaybe<SortOrderEnum>;
  readonly link_url: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_component: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCK = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_component: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
};

type STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCK>;
  readonly node: STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCK;
  readonly previous: Maybe<STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCK>;
};

type STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_component: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_component: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_IMAGE_BLOCKSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_component: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_BLOCKS_LINK_BLOCK = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_component: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly text: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_BLOCKS_LINK_BLOCKConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_LINK_BLOCKEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_LINK_BLOCKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_LINK_BLOCK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_LINK_BLOCKConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_LINK_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_LINK_BLOCKConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_LINK_BLOCKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_LINK_BLOCKConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_LINK_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_LINK_BLOCKConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_LINK_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_LINK_BLOCKConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_LINK_BLOCKFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_LINK_BLOCKEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_BLOCKS_LINK_BLOCK>;
  readonly node: STRAPI__COMPONENT_BLOCKS_LINK_BLOCK;
  readonly previous: Maybe<STRAPI__COMPONENT_BLOCKS_LINK_BLOCK>;
};

type STRAPI__COMPONENT_BLOCKS_LINK_BLOCKFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_component: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_BLOCKS_LINK_BLOCKFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_component: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_BLOCKS_LINK_BLOCKGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_LINK_BLOCKEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_LINK_BLOCKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_LINK_BLOCK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_LINK_BLOCKGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_LINK_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_LINK_BLOCKGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_LINK_BLOCKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_LINK_BLOCKGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_LINK_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_LINK_BLOCKGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_LINK_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_LINK_BLOCKGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_LINK_BLOCKFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_LINK_BLOCKSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_component: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_component: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly text: Maybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKText>;
  readonly title: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK>;
  readonly node: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK;
  readonly previous: Maybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK>;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_component: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKTextFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_component: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly text: InputMaybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKTextFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFilterInput>;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKSTRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKUnion = STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK | STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCK;

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_component: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKTextSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKText = {
  readonly data: Maybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODE>;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKTextFieldSelector = {
  readonly data: InputMaybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEFieldSelector>;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKTextFilterInput = {
  readonly data: InputMaybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEFilterInput>;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCKTextSortInput = {
  readonly data: InputMaybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODESortInput>;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODE>;
  readonly node: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODE;
  readonly previous: Maybe<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODE>;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODEFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_TEXT_BLOCK_TEXT_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCK = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_component: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly video_url: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCK>;
  readonly node: STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCK;
  readonly previous: Maybe<STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCK>;
};

type STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_component: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly video_url: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_component: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly video_url: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKFieldSelector;
};


type STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKFieldSelector;
};

type STRAPI__COMPONENT_BLOCKS_VIDEO_BLOCKSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_component: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly video_url: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_FOOTER_FOOTER_SECTION = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_FOOTER_FOOTER_SECTION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONConnection_distinctArgs = {
  field: STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFieldSelector;
};


type STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONConnection_groupArgs = {
  field: STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONConnection_maxArgs = {
  field: STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFieldSelector;
};


type STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONConnection_minArgs = {
  field: STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFieldSelector;
};


type STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONConnection_sumArgs = {
  field: STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFieldSelector;
};

type STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_FOOTER_FOOTER_SECTION>;
  readonly node: STRAPI__COMPONENT_FOOTER_FOOTER_SECTION;
  readonly previous: Maybe<STRAPI__COMPONENT_FOOTER_FOOTER_SECTION>;
};

type STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFilterInput>;
};

type STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_FOOTER_FOOTER_SECTION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFieldSelector;
};


type STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFieldSelector;
};


type STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFieldSelector;
};


type STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONFieldSelector;
};

type STRAPI__COMPONENT_FOOTER_FOOTER_SECTIONSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_LINKS_LINK = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly url: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_LINKS_LINKConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_LINKS_LINKEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_LINKS_LINKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_LINKS_LINK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_LINKS_LINKConnection_distinctArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKFieldSelector;
};


type STRAPI__COMPONENT_LINKS_LINKConnection_groupArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_LINKS_LINKConnection_maxArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKFieldSelector;
};


type STRAPI__COMPONENT_LINKS_LINKConnection_minArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKFieldSelector;
};


type STRAPI__COMPONENT_LINKS_LINKConnection_sumArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKFieldSelector;
};

type STRAPI__COMPONENT_LINKS_LINKEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_LINKS_LINK>;
  readonly node: STRAPI__COMPONENT_LINKS_LINK;
  readonly previous: Maybe<STRAPI__COMPONENT_LINKS_LINK>;
};

type STRAPI__COMPONENT_LINKS_LINKFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_LINKS_LINKFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_LINKS_LINKFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__COMPONENT_LINKS_LINKFilterInput>;
};

type STRAPI__COMPONENT_LINKS_LINKGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_LINKS_LINKEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_LINKS_LINKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_LINKS_LINK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_LINKS_LINKGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKFieldSelector;
};


type STRAPI__COMPONENT_LINKS_LINKGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_LINKS_LINKGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKFieldSelector;
};


type STRAPI__COMPONENT_LINKS_LINKGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKFieldSelector;
};


type STRAPI__COMPONENT_LINKS_LINKGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKFieldSelector;
};

type STRAPI__COMPONENT_LINKS_LINKSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_NAVIGATION_NAVIGATION = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_NAVIGATION_NAVIGATIONConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_NAVIGATION_NAVIGATIONEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_NAVIGATION_NAVIGATIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_NAVIGATION_NAVIGATION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_NAVIGATION_NAVIGATIONConnection_distinctArgs = {
  field: STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFieldSelector;
};


type STRAPI__COMPONENT_NAVIGATION_NAVIGATIONConnection_groupArgs = {
  field: STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_NAVIGATION_NAVIGATIONConnection_maxArgs = {
  field: STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFieldSelector;
};


type STRAPI__COMPONENT_NAVIGATION_NAVIGATIONConnection_minArgs = {
  field: STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFieldSelector;
};


type STRAPI__COMPONENT_NAVIGATION_NAVIGATIONConnection_sumArgs = {
  field: STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFieldSelector;
};

type STRAPI__COMPONENT_NAVIGATION_NAVIGATIONEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_NAVIGATION_NAVIGATION>;
  readonly node: STRAPI__COMPONENT_NAVIGATION_NAVIGATION;
  readonly previous: Maybe<STRAPI__COMPONENT_NAVIGATION_NAVIGATION>;
};

type STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFilterInput>;
};

type STRAPI__COMPONENT_NAVIGATION_NAVIGATIONGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_NAVIGATION_NAVIGATIONEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_NAVIGATION_NAVIGATIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_NAVIGATION_NAVIGATION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_NAVIGATION_NAVIGATIONGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFieldSelector;
};


type STRAPI__COMPONENT_NAVIGATION_NAVIGATIONGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_NAVIGATION_NAVIGATIONGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFieldSelector;
};


type STRAPI__COMPONENT_NAVIGATION_NAVIGATIONGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFieldSelector;
};


type STRAPI__COMPONENT_NAVIGATION_NAVIGATIONGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_NAVIGATION_NAVIGATIONFieldSelector;
};

type STRAPI__COMPONENT_NAVIGATION_NAVIGATIONSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIA = Node & {
  readonly alternativeText: Maybe<Scalars['String']>;
  readonly caption: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly ext: Maybe<Scalars['String']>;
  readonly formats: Maybe<STRAPI__MEDIAFormats>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly localFile: Maybe<File>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly size: Maybe<Scalars['Float']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};


type STRAPI__MEDIA_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI__MEDIA_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI__MEDIAConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__MEDIAEdge>;
  readonly group: ReadonlyArray<STRAPI__MEDIAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__MEDIA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__MEDIAConnection_distinctArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAConnection_groupArgs = {
  field: STRAPI__MEDIAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__MEDIAConnection_maxArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAConnection_minArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAConnection_sumArgs = {
  field: STRAPI__MEDIAFieldSelector;
};

type STRAPI__MEDIAEdge = {
  readonly next: Maybe<STRAPI__MEDIA>;
  readonly node: STRAPI__MEDIA;
  readonly previous: Maybe<STRAPI__MEDIA>;
};

type STRAPI__MEDIAFieldSelector = {
  readonly alternativeText: InputMaybe<FieldSelectorEnum>;
  readonly caption: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly formats: InputMaybe<STRAPI__MEDIAFormatsFieldSelector>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly localFile: InputMaybe<FileFieldSelector>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFilterInput = {
  readonly alternativeText: InputMaybe<StringQueryOperatorInput>;
  readonly caption: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly formats: InputMaybe<STRAPI__MEDIAFormatsFilterInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly localFile: InputMaybe<FileFilterInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__MEDIAFilterInput>;
};

type STRAPI__MEDIAFormats = {
  readonly large: Maybe<STRAPI__MEDIAFormatsLarge>;
  readonly medium: Maybe<STRAPI__MEDIAFormatsMedium>;
  readonly small: Maybe<STRAPI__MEDIAFormatsSmall>;
  readonly thumbnail: Maybe<STRAPI__MEDIAFormatsThumbnail>;
};

type STRAPI__MEDIAFormatsFieldSelector = {
  readonly large: InputMaybe<STRAPI__MEDIAFormatsLargeFieldSelector>;
  readonly medium: InputMaybe<STRAPI__MEDIAFormatsMediumFieldSelector>;
  readonly small: InputMaybe<STRAPI__MEDIAFormatsSmallFieldSelector>;
  readonly thumbnail: InputMaybe<STRAPI__MEDIAFormatsThumbnailFieldSelector>;
};

type STRAPI__MEDIAFormatsFilterInput = {
  readonly large: InputMaybe<STRAPI__MEDIAFormatsLargeFilterInput>;
  readonly medium: InputMaybe<STRAPI__MEDIAFormatsMediumFilterInput>;
  readonly small: InputMaybe<STRAPI__MEDIAFormatsSmallFilterInput>;
  readonly thumbnail: InputMaybe<STRAPI__MEDIAFormatsThumbnailFilterInput>;
};

type STRAPI__MEDIAFormatsLarge = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsLargeFieldSelector = {
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFormatsLargeFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsLargeSortInput = {
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIAFormatsMedium = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsMediumFieldSelector = {
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFormatsMediumFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsMediumSortInput = {
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIAFormatsSmall = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsSmallFieldSelector = {
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFormatsSmallFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsSmallSortInput = {
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIAFormatsSortInput = {
  readonly large: InputMaybe<STRAPI__MEDIAFormatsLargeSortInput>;
  readonly medium: InputMaybe<STRAPI__MEDIAFormatsMediumSortInput>;
  readonly small: InputMaybe<STRAPI__MEDIAFormatsSmallSortInput>;
  readonly thumbnail: InputMaybe<STRAPI__MEDIAFormatsThumbnailSortInput>;
};

type STRAPI__MEDIAFormatsThumbnail = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsThumbnailFieldSelector = {
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFormatsThumbnailFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsThumbnailSortInput = {
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIAGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__MEDIAEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__MEDIAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__MEDIA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__MEDIAGroupConnection_distinctArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAGroupConnection_groupArgs = {
  field: STRAPI__MEDIAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__MEDIAGroupConnection_maxArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAGroupConnection_minArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAGroupConnection_sumArgs = {
  field: STRAPI__MEDIAFieldSelector;
};

type STRAPI__MEDIASortInput = {
  readonly alternativeText: InputMaybe<SortOrderEnum>;
  readonly caption: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly formats: InputMaybe<STRAPI__MEDIAFormatsSortInput>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly localFile: InputMaybe<FileSortInput>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type TypegenPageQueryVariables = Exact<{ [key: string]: never; }>;


type TypegenPageQuery = { readonly site: { readonly siteMetadata: { readonly title: string | null, readonly description: string | null } | null } | null };


}
